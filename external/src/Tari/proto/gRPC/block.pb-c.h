/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: block.proto */

#ifndef PROTOBUF_C_block_2eproto__INCLUDED
#define PROTOBUF_C_block_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "transaction.pb-c.h"

typedef struct _Tari__Rpc__BlockHeader Tari__Rpc__BlockHeader;
typedef struct _Tari__Rpc__ProofOfWork Tari__Rpc__ProofOfWork;
typedef struct _Tari__Rpc__PowAlgo Tari__Rpc__PowAlgo;
typedef struct _Tari__Rpc__Block Tari__Rpc__Block;
typedef struct _Tari__Rpc__HistoricalBlock Tari__Rpc__HistoricalBlock;
typedef struct _Tari__Rpc__NewBlockHeaderTemplate Tari__Rpc__NewBlockHeaderTemplate;
typedef struct _Tari__Rpc__NewBlockTemplate Tari__Rpc__NewBlockTemplate;


/* --- enums --- */

/*
 * The permitted pow algorithms
 */
typedef enum _Tari__Rpc__PowAlgo__PowAlgos {
  /*
   * Accessible as `grpc::pow_algo::PowAlgos::Randomx`
   */
  TARI__RPC__POW_ALGO__POW_ALGOS__POW_ALGOS_RANDOMX = 0,
  /*
   * Accessible as `grpc::pow_algo::PowAlgos::Sha3x`
   */
  TARI__RPC__POW_ALGO__POW_ALGOS__POW_ALGOS_SHA3X = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TARI__RPC__POW_ALGO__POW_ALGOS)
} Tari__Rpc__PowAlgo__PowAlgos;

/* --- messages --- */

/*
 * The BlockHeader contains all the metadata for the block, including proof of work, a link to the previous block
 * and the transaction kernels.
 */
struct  _Tari__Rpc__BlockHeader
{
  ProtobufCMessage base;
  /*
   * The hash of the block
   */
  ProtobufCBinaryData hash;
  /*
   * Version of the block
   */
  uint32_t version;
  /*
   * Height of this block since the genesis block (height 0)
   */
  uint64_t height;
  /*
   * Hash of the block previous to this in the chain.
   */
  ProtobufCBinaryData prev_hash;
  /*
   * Timestamp at which the block was built.
   */
  uint64_t timestamp;
  /*
   * This is the UTXO merkle root of the outputs
   * This is calculated as Hash (txo MMR root  || roaring bitmap hash of UTXO indices)
   */
  ProtobufCBinaryData output_mr;
  /*
   * This is the MMR root of the kernels
   */
  ProtobufCBinaryData kernel_mr;
  /*
   * This is the Merkle root of the inputs in this block
   */
  ProtobufCBinaryData input_mr;
  /*
   * Total accumulated sum of kernel offsets since genesis block. We can derive the kernel offset sum for *this*
   * block from the total kernel offset of the previous block header.
   */
  ProtobufCBinaryData total_kernel_offset;
  /*
   * Nonce increment used to mine this block.
   */
  uint64_t nonce;
  /*
   * Proof of work metadata
   */
  Tari__Rpc__ProofOfWork *pow;
  /*
   * Kernel MMR size
   */
  uint64_t kernel_mmr_size;
  /*
   * Output MMR size
   */
  uint64_t output_mmr_size;
  /*
   * Sum of script offsets for all kernels in this block.
   */
  ProtobufCBinaryData total_script_offset;
  /*
   * Merkle root of validator nodes
   */
  ProtobufCBinaryData validator_node_mr;
  /*
   * Validator size
   */
  uint64_t validator_node_size;
};
#define TARI__RPC__BLOCK_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__block_header__descriptor) \
    , {0,NULL}, 0, 0, {0,NULL}, 0, {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL}, 0, NULL, 0, 0, {0,NULL}, {0,NULL}, 0 }


/*
 * The proof of work data structure that is included in the block header.
 */
struct  _Tari__Rpc__ProofOfWork
{
  ProtobufCMessage base;
  /*
   * The algorithm used to mine this block
   *   0 = Monero
   *   1 = Sha3X
   */
  uint64_t pow_algo;
  /*
   * Supplemental proof of work data. For example for Sha3x, this would be empty (only the block header is
   * required), but for Monero merge mining we need the Monero block header and RandomX seed hash.
   */
  ProtobufCBinaryData pow_data;
};
#define TARI__RPC__PROOF_OF_WORK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__proof_of_work__descriptor) \
    , 0, {0,NULL} }


/*
 *This is used to request the which pow algo should be used with the block template
 */
struct  _Tari__Rpc__PowAlgo
{
  ProtobufCMessage base;
  /*
   * The pow algo to use
   */
  Tari__Rpc__PowAlgo__PowAlgos pow_algo;
};
#define TARI__RPC__POW_ALGO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__pow_algo__descriptor) \
    , TARI__RPC__POW_ALGO__POW_ALGOS__POW_ALGOS_RANDOMX }


/*
 * A Minotari block. Blocks are linked together into a blockchain.
 */
struct  _Tari__Rpc__Block
{
  ProtobufCMessage base;
  /*
   * The BlockHeader contains all the metadata for the block, including proof of work, a link to the previous block
   * and the transaction kernels.
   */
  Tari__Rpc__BlockHeader *header;
  /*
   * The components of the block or transaction. The same struct can be used for either, since in Mimblewimble,
   * blocks consist of inputs, outputs and kernels, rather than transactions.
   */
  Tari__Rpc__AggregateBody *body;
};
#define TARI__RPC__BLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__block__descriptor) \
    , NULL, NULL }


/*
 * The representation of a historical block in the blockchain. It is essentially identical to a protocol-defined
 * block but contains some extra metadata that clients such as Block Explorers will find interesting.
 */
struct  _Tari__Rpc__HistoricalBlock
{
  ProtobufCMessage base;
  /*
   * The number of blocks that have been mined since this block, including this one. The current tip will have one
   * confirmation.
   */
  uint64_t confirmations;
  /*
   * The underlying block
   */
  Tari__Rpc__Block *block;
};
#define TARI__RPC__HISTORICAL_BLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__historical_block__descriptor) \
    , 0, NULL }


/*
 * The NewBlockHeaderTemplate is used for the construction of a new mine-able block. It contains all the metadata for the block that the Base Node is able to complete on behalf of a Miner.
 */
struct  _Tari__Rpc__NewBlockHeaderTemplate
{
  ProtobufCMessage base;
  /*
   * Version of the block
   */
  uint32_t version;
  /*
   * Height of this block since the genesis block (height 0)
   */
  uint64_t height;
  /*
   * Hash of the block previous to this in the chain.
   */
  ProtobufCBinaryData prev_hash;
  /*
   * Total accumulated sum of kernel offsets since genesis block. We can derive the kernel offset sum for *this*
   * block from the total kernel offset of the previous block header.
   */
  ProtobufCBinaryData total_kernel_offset;
  /*
   * Proof of work metadata
   */
  Tari__Rpc__ProofOfWork *pow;
  /*
   * Sum of script offsets for all kernels in this block.
   */
  ProtobufCBinaryData total_script_offset;
};
#define TARI__RPC__NEW_BLOCK_HEADER_TEMPLATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__new_block_header_template__descriptor) \
    , 0, 0, {0,NULL}, {0,NULL}, NULL, {0,NULL} }


/*
 * The new block template is used constructing a new partial block, allowing a miner to added the coinbase utxo and as a final step the Base node to add the MMR roots to the header.
 */
struct  _Tari__Rpc__NewBlockTemplate
{
  ProtobufCMessage base;
  /*
   * The NewBlockHeaderTemplate is used for the construction of a new mineable block. It contains all the metadata for
   * the block that the Base Node is able to complete on behalf of a Miner.
   */
  Tari__Rpc__NewBlockHeaderTemplate *header;
  /*
   * This flag indicates if the inputs, outputs and kernels have been sorted internally, that is, the sort() method
   * has been called. This may be false even if all components are sorted.
   */
  Tari__Rpc__AggregateBody *body;
};
#define TARI__RPC__NEW_BLOCK_TEMPLATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__new_block_template__descriptor) \
    , NULL, NULL }


/* Tari__Rpc__BlockHeader methods */
void   tari__rpc__block_header__init
                     (Tari__Rpc__BlockHeader         *message);
size_t tari__rpc__block_header__get_packed_size
                     (const Tari__Rpc__BlockHeader   *message);
size_t tari__rpc__block_header__pack
                     (const Tari__Rpc__BlockHeader   *message,
                      uint8_t             *out);
size_t tari__rpc__block_header__pack_to_buffer
                     (const Tari__Rpc__BlockHeader   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__BlockHeader *
       tari__rpc__block_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__block_header__free_unpacked
                     (Tari__Rpc__BlockHeader *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__ProofOfWork methods */
void   tari__rpc__proof_of_work__init
                     (Tari__Rpc__ProofOfWork         *message);
size_t tari__rpc__proof_of_work__get_packed_size
                     (const Tari__Rpc__ProofOfWork   *message);
size_t tari__rpc__proof_of_work__pack
                     (const Tari__Rpc__ProofOfWork   *message,
                      uint8_t             *out);
size_t tari__rpc__proof_of_work__pack_to_buffer
                     (const Tari__Rpc__ProofOfWork   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__ProofOfWork *
       tari__rpc__proof_of_work__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__proof_of_work__free_unpacked
                     (Tari__Rpc__ProofOfWork *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__PowAlgo methods */
void   tari__rpc__pow_algo__init
                     (Tari__Rpc__PowAlgo         *message);
size_t tari__rpc__pow_algo__get_packed_size
                     (const Tari__Rpc__PowAlgo   *message);
size_t tari__rpc__pow_algo__pack
                     (const Tari__Rpc__PowAlgo   *message,
                      uint8_t             *out);
size_t tari__rpc__pow_algo__pack_to_buffer
                     (const Tari__Rpc__PowAlgo   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__PowAlgo *
       tari__rpc__pow_algo__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__pow_algo__free_unpacked
                     (Tari__Rpc__PowAlgo *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__Block methods */
void   tari__rpc__block__init
                     (Tari__Rpc__Block         *message);
size_t tari__rpc__block__get_packed_size
                     (const Tari__Rpc__Block   *message);
size_t tari__rpc__block__pack
                     (const Tari__Rpc__Block   *message,
                      uint8_t             *out);
size_t tari__rpc__block__pack_to_buffer
                     (const Tari__Rpc__Block   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__Block *
       tari__rpc__block__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__block__free_unpacked
                     (Tari__Rpc__Block *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__HistoricalBlock methods */
void   tari__rpc__historical_block__init
                     (Tari__Rpc__HistoricalBlock         *message);
size_t tari__rpc__historical_block__get_packed_size
                     (const Tari__Rpc__HistoricalBlock   *message);
size_t tari__rpc__historical_block__pack
                     (const Tari__Rpc__HistoricalBlock   *message,
                      uint8_t             *out);
size_t tari__rpc__historical_block__pack_to_buffer
                     (const Tari__Rpc__HistoricalBlock   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__HistoricalBlock *
       tari__rpc__historical_block__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__historical_block__free_unpacked
                     (Tari__Rpc__HistoricalBlock *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__NewBlockHeaderTemplate methods */
void   tari__rpc__new_block_header_template__init
                     (Tari__Rpc__NewBlockHeaderTemplate         *message);
size_t tari__rpc__new_block_header_template__get_packed_size
                     (const Tari__Rpc__NewBlockHeaderTemplate   *message);
size_t tari__rpc__new_block_header_template__pack
                     (const Tari__Rpc__NewBlockHeaderTemplate   *message,
                      uint8_t             *out);
size_t tari__rpc__new_block_header_template__pack_to_buffer
                     (const Tari__Rpc__NewBlockHeaderTemplate   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__NewBlockHeaderTemplate *
       tari__rpc__new_block_header_template__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__new_block_header_template__free_unpacked
                     (Tari__Rpc__NewBlockHeaderTemplate *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__NewBlockTemplate methods */
void   tari__rpc__new_block_template__init
                     (Tari__Rpc__NewBlockTemplate         *message);
size_t tari__rpc__new_block_template__get_packed_size
                     (const Tari__Rpc__NewBlockTemplate   *message);
size_t tari__rpc__new_block_template__pack
                     (const Tari__Rpc__NewBlockTemplate   *message,
                      uint8_t             *out);
size_t tari__rpc__new_block_template__pack_to_buffer
                     (const Tari__Rpc__NewBlockTemplate   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__NewBlockTemplate *
       tari__rpc__new_block_template__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__new_block_template__free_unpacked
                     (Tari__Rpc__NewBlockTemplate *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Tari__Rpc__BlockHeader_Closure)
                 (const Tari__Rpc__BlockHeader *message,
                  void *closure_data);
typedef void (*Tari__Rpc__ProofOfWork_Closure)
                 (const Tari__Rpc__ProofOfWork *message,
                  void *closure_data);
typedef void (*Tari__Rpc__PowAlgo_Closure)
                 (const Tari__Rpc__PowAlgo *message,
                  void *closure_data);
typedef void (*Tari__Rpc__Block_Closure)
                 (const Tari__Rpc__Block *message,
                  void *closure_data);
typedef void (*Tari__Rpc__HistoricalBlock_Closure)
                 (const Tari__Rpc__HistoricalBlock *message,
                  void *closure_data);
typedef void (*Tari__Rpc__NewBlockHeaderTemplate_Closure)
                 (const Tari__Rpc__NewBlockHeaderTemplate *message,
                  void *closure_data);
typedef void (*Tari__Rpc__NewBlockTemplate_Closure)
                 (const Tari__Rpc__NewBlockTemplate *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor tari__rpc__block_header__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__proof_of_work__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__pow_algo__descriptor;
extern const ProtobufCEnumDescriptor    tari__rpc__pow_algo__pow_algos__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__block__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__historical_block__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__new_block_header_template__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__new_block_template__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_block_2eproto__INCLUDED */
