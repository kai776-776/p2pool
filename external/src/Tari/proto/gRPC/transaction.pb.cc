// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction.proto
// Protobuf C++ Version: 5.26.0-rc1

#include "transaction.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tari {
namespace rpc {

inline constexpr TransactionKernel::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        excess_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        burn_commitment_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        excess_sig_{nullptr},
        fee_{::uint64_t{0u}},
        lock_height_{::uint64_t{0u}},
        features_{0u},
        version_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR TransactionKernel::TransactionKernel(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TransactionKernelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionKernelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionKernelDefaultTypeInternal() {}
  union {
    TransactionKernel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionKernelDefaultTypeInternal _TransactionKernel_default_instance_;

inline constexpr OutputFeatures::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        coinbase_extra_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sidechain_feature_{nullptr},
        version_{0u},
        output_type_{0u},
        maturity_{::uint64_t{0u}},
        range_proof_type_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR OutputFeatures::OutputFeatures(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OutputFeaturesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutputFeaturesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutputFeaturesDefaultTypeInternal() {}
  union {
    OutputFeatures _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutputFeaturesDefaultTypeInternal _OutputFeatures_default_instance_;

inline constexpr UnblindedOutput::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        spending_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        script_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        input_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        script_private_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sender_offset_public_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        covenant_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        encrypted_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        features_{nullptr},
        metadata_signature_{nullptr},
        value_{::uint64_t{0u}},
        script_lock_height_{::uint64_t{0u}},
        minimum_value_promise_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR UnblindedOutput::UnblindedOutput(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct UnblindedOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnblindedOutputDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnblindedOutputDefaultTypeInternal() {}
  union {
    UnblindedOutput _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnblindedOutputDefaultTypeInternal _UnblindedOutput_default_instance_;

inline constexpr TransactionOutput::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        commitment_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        script_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sender_offset_public_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        covenant_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        encrypted_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        features_{nullptr},
        range_proof_{nullptr},
        metadata_signature_{nullptr},
        minimum_value_promise_{::uint64_t{0u}},
        version_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR TransactionOutput::TransactionOutput(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TransactionOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionOutputDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionOutputDefaultTypeInternal() {}
  union {
    TransactionOutput _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionOutputDefaultTypeInternal _TransactionOutput_default_instance_;

inline constexpr TransactionInput::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        commitment_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        script_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        input_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sender_offset_public_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        output_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        covenant_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        encrypted_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rangeproof_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        features_{nullptr},
        script_signature_{nullptr},
        metadata_signature_{nullptr},
        minimum_value_promise_{::uint64_t{0u}},
        version_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR TransactionInput::TransactionInput(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TransactionInputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionInputDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionInputDefaultTypeInternal() {}
  union {
    TransactionInput _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionInputDefaultTypeInternal _TransactionInput_default_instance_;

inline constexpr AggregateBody::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : inputs_{},
        outputs_{},
        kernels_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AggregateBody::AggregateBody(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AggregateBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregateBodyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregateBodyDefaultTypeInternal() {}
  union {
    AggregateBody _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregateBodyDefaultTypeInternal _AggregateBody_default_instance_;

inline constexpr Transaction::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        offset_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        script_offset_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        body_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Transaction::Transaction(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionDefaultTypeInternal() {}
  union {
    Transaction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionDefaultTypeInternal _Transaction_default_instance_;
}  // namespace rpc
}  // namespace tari
static ::_pb::Metadata file_level_metadata_transaction_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_transaction_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_transaction_2eproto = nullptr;
const ::uint32_t
    TableStruct_transaction_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _impl_.features_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _impl_.fee_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _impl_.lock_height_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _impl_.excess_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _impl_.excess_sig_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _impl_.hash_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _impl_.burn_commitment_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.features_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.commitment_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.hash_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.script_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.input_data_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.script_signature_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.sender_offset_public_key_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.output_hash_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.covenant_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.encrypted_data_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.minimum_value_promise_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.metadata_signature_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _impl_.rangeproof_hash_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        2,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.features_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.commitment_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.range_proof_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.hash_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.script_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.sender_offset_public_key_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.metadata_signature_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.covenant_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.encrypted_data_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _impl_.minimum_value_promise_),
        0,
        ~0u,
        1,
        ~0u,
        ~0u,
        ~0u,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tari::rpc::OutputFeatures, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::OutputFeatures, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tari::rpc::OutputFeatures, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::OutputFeatures, _impl_.output_type_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::OutputFeatures, _impl_.maturity_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::OutputFeatures, _impl_.coinbase_extra_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::OutputFeatures, _impl_.sidechain_feature_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::OutputFeatures, _impl_.range_proof_type_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tari::rpc::AggregateBody, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tari::rpc::AggregateBody, _impl_.inputs_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::AggregateBody, _impl_.outputs_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::AggregateBody, _impl_.kernels_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::Transaction, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::Transaction, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tari::rpc::Transaction, _impl_.offset_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::Transaction, _impl_.body_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::Transaction, _impl_.script_offset_),
        ~0u,
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.value_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.spending_key_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.features_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.script_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.input_data_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.script_private_key_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.sender_offset_public_key_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.metadata_signature_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.script_lock_height_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.covenant_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.encrypted_data_),
        PROTOBUF_FIELD_OFFSET(::tari::rpc::UnblindedOutput, _impl_.minimum_value_promise_),
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 16, -1, sizeof(::tari::rpc::TransactionKernel)},
        {24, 46, -1, sizeof(::tari::rpc::TransactionInput)},
        {60, 79, -1, sizeof(::tari::rpc::TransactionOutput)},
        {90, 104, -1, sizeof(::tari::rpc::OutputFeatures)},
        {110, -1, -1, sizeof(::tari::rpc::AggregateBody)},
        {121, 132, -1, sizeof(::tari::rpc::Transaction)},
        {135, 155, -1, sizeof(::tari::rpc::UnblindedOutput)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::tari::rpc::_TransactionKernel_default_instance_._instance,
    &::tari::rpc::_TransactionInput_default_instance_._instance,
    &::tari::rpc::_TransactionOutput_default_instance_._instance,
    &::tari::rpc::_OutputFeatures_default_instance_._instance,
    &::tari::rpc::_AggregateBody_default_instance_._instance,
    &::tari::rpc::_Transaction_default_instance_._instance,
    &::tari::rpc::_UnblindedOutput_default_instance_._instance,
};
const char descriptor_table_protodef_transaction_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\021transaction.proto\022\010tari.rpc\032\013types.pro"
    "to\032\025sidechain_types.proto\"\270\001\n\021Transactio"
    "nKernel\022\020\n\010features\030\001 \001(\r\022\013\n\003fee\030\002 \001(\004\022\023"
    "\n\013lock_height\030\003 \001(\004\022\016\n\006excess\030\006 \001(\014\022\'\n\ne"
    "xcess_sig\030\007 \001(\0132\023.tari.rpc.Signature\022\014\n\004"
    "hash\030\010 \001(\014\022\017\n\007version\030\t \001(\r\022\027\n\017burn_comm"
    "itment\030\n \001(\014\"\240\003\n\020TransactionInput\022*\n\010fea"
    "tures\030\001 \001(\0132\030.tari.rpc.OutputFeatures\022\022\n"
    "\ncommitment\030\002 \001(\014\022\014\n\004hash\030\003 \001(\014\022\016\n\006scrip"
    "t\030\004 \001(\014\022\022\n\ninput_data\030\005 \001(\014\0226\n\020script_si"
    "gnature\030\007 \001(\0132\034.tari.rpc.ComAndPubSignat"
    "ure\022 \n\030sender_offset_public_key\030\010 \001(\014\022\023\n"
    "\013output_hash\030\t \001(\014\022\020\n\010covenant\030\n \001(\014\022\017\n\007"
    "version\030\013 \001(\r\022\026\n\016encrypted_data\030\014 \001(\014\022\035\n"
    "\025minimum_value_promise\030\r \001(\004\0228\n\022metadata"
    "_signature\030\016 \001(\0132\034.tari.rpc.ComAndPubSig"
    "nature\022\027\n\017rangeproof_hash\030\017 \001(\014\"\322\002\n\021Tran"
    "sactionOutput\022*\n\010features\030\001 \001(\0132\030.tari.r"
    "pc.OutputFeatures\022\022\n\ncommitment\030\002 \001(\014\022)\n"
    "\013range_proof\030\003 \001(\0132\024.tari.rpc.RangeProof"
    "\022\014\n\004hash\030\004 \001(\014\022\016\n\006script\030\005 \001(\014\022 \n\030sender"
    "_offset_public_key\030\006 \001(\014\0228\n\022metadata_sig"
    "nature\030\007 \001(\0132\034.tari.rpc.ComAndPubSignatu"
    "re\022\020\n\010covenant\030\010 \001(\014\022\017\n\007version\030\t \001(\r\022\026\n"
    "\016encrypted_data\030\n \001(\014\022\035\n\025minimum_value_p"
    "romise\030\013 \001(\004\"\261\001\n\016OutputFeatures\022\017\n\007versi"
    "on\030\001 \001(\r\022\023\n\013output_type\030\002 \001(\r\022\020\n\010maturit"
    "y\030\003 \001(\004\022\026\n\016coinbase_extra\030\004 \001(\014\0225\n\021sidec"
    "hain_feature\030\005 \001(\0132\032.tari.rpc.SideChainF"
    "eature\022\030\n\020range_proof_type\030\006 \001(\r\"\227\001\n\rAgg"
    "regateBody\022*\n\006inputs\030\001 \003(\0132\032.tari.rpc.Tr"
    "ansactionInput\022,\n\007outputs\030\002 \003(\0132\033.tari.r"
    "pc.TransactionOutput\022,\n\007kernels\030\003 \003(\0132\033."
    "tari.rpc.TransactionKernel\"[\n\013Transactio"
    "n\022\016\n\006offset\030\001 \001(\014\022%\n\004body\030\002 \001(\0132\027.tari.r"
    "pc.AggregateBody\022\025\n\rscript_offset\030\003 \001(\014\""
    "\343\002\n\017UnblindedOutput\022\r\n\005value\030\001 \001(\004\022\024\n\014sp"
    "ending_key\030\002 \001(\014\022*\n\010features\030\003 \001(\0132\030.tar"
    "i.rpc.OutputFeatures\022\016\n\006script\030\004 \001(\014\022\022\n\n"
    "input_data\030\005 \001(\014\022\032\n\022script_private_key\030\007"
    " \001(\014\022 \n\030sender_offset_public_key\030\010 \001(\014\0228"
    "\n\022metadata_signature\030\t \001(\0132\034.tari.rpc.Co"
    "mAndPubSignature\022\032\n\022script_lock_height\030\n"
    " \001(\004\022\020\n\010covenant\030\013 \001(\014\022\026\n\016encrypted_data"
    "\030\014 \001(\014\022\035\n\025minimum_value_promise\030\r \001(\004b\006p"
    "roto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_transaction_2eproto_deps[2] =
    {
        &::descriptor_table_sidechain_5ftypes_2eproto,
        &::descriptor_table_types_2eproto,
};
static ::absl::once_flag descriptor_table_transaction_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transaction_2eproto = {
    false,
    false,
    1805,
    descriptor_table_protodef_transaction_2eproto,
    "transaction.proto",
    &descriptor_table_transaction_2eproto_once,
    descriptor_table_transaction_2eproto_deps,
    2,
    7,
    schemas,
    file_default_instances,
    TableStruct_transaction_2eproto::offsets,
    file_level_metadata_transaction_2eproto,
    file_level_enum_descriptors_transaction_2eproto,
    file_level_service_descriptors_transaction_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transaction_2eproto_getter() {
  return &descriptor_table_transaction_2eproto;
}
namespace tari {
namespace rpc {
// ===================================================================

class TransactionKernel::_Internal {
 public:
  using HasBits = decltype(std::declval<TransactionKernel>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_._has_bits_);
};

void TransactionKernel::clear_excess_sig() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.excess_sig_ != nullptr) _impl_.excess_sig_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TransactionKernel::TransactionKernel(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.TransactionKernel)
}
inline PROTOBUF_NDEBUG_INLINE TransactionKernel::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        excess_(arena, from.excess_),
        hash_(arena, from.hash_),
        burn_commitment_(arena, from.burn_commitment_) {}

TransactionKernel::TransactionKernel(
    ::google::protobuf::Arena* arena,
    const TransactionKernel& from)
    : ::google::protobuf::Message(arena) {
  TransactionKernel* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.excess_sig_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tari::rpc::Signature>(
                              arena, *from._impl_.excess_sig_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, fee_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, fee_),
           offsetof(Impl_, version_) -
               offsetof(Impl_, fee_) +
               sizeof(Impl_::version_));

  // @@protoc_insertion_point(copy_constructor:tari.rpc.TransactionKernel)
}
inline PROTOBUF_NDEBUG_INLINE TransactionKernel::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        excess_(arena),
        hash_(arena),
        burn_commitment_(arena) {}

inline void TransactionKernel::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, excess_sig_),
           0,
           offsetof(Impl_, version_) -
               offsetof(Impl_, excess_sig_) +
               sizeof(Impl_::version_));
}
TransactionKernel::~TransactionKernel() {
  // @@protoc_insertion_point(destructor:tari.rpc.TransactionKernel)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TransactionKernel::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.excess_.Destroy();
  _impl_.hash_.Destroy();
  _impl_.burn_commitment_.Destroy();
  delete _impl_.excess_sig_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
TransactionKernel::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_._cached_size_),
              false,
          },
          &TransactionKernel::MergeImpl,
          &TransactionKernel::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void TransactionKernel::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.TransactionKernel)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.excess_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _impl_.burn_commitment_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.excess_sig_ != nullptr);
    _impl_.excess_sig_->Clear();
  }
  ::memset(&_impl_.fee_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.fee_)) + sizeof(_impl_.version_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TransactionKernel::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 8, 1, 0, 2> TransactionKernel::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966296,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TransactionKernel_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tari::rpc::TransactionKernel>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 features = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TransactionKernel, _impl_.features_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.features_)}},
    // uint64 fee = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TransactionKernel, _impl_.fee_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.fee_)}},
    // uint64 lock_height = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TransactionKernel, _impl_.lock_height_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.lock_height_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // bytes excess = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.excess_)}},
    // .tari.rpc.Signature excess_sig = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.excess_sig_)}},
    // bytes hash = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.hash_)}},
    // uint32 version = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TransactionKernel, _impl_.version_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.version_)}},
    // bytes burn_commitment = 10;
    {::_pbi::TcParser::FastBS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.burn_commitment_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 features = 1;
    {PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.features_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint64 fee = 2;
    {PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.fee_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 lock_height = 3;
    {PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.lock_height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // bytes excess = 6;
    {PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.excess_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tari.rpc.Signature excess_sig = 7;
    {PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.excess_sig_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes hash = 8;
    {PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint32 version = 9;
    {PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bytes burn_commitment = 10;
    {PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.burn_commitment_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tari::rpc::Signature>()},
  }}, {{
  }},
};

::uint8_t* TransactionKernel::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.TransactionKernel)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 features = 1;
  if (this->_internal_features() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_features(), target);
  }

  // uint64 fee = 2;
  if (this->_internal_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_fee(), target);
  }

  // uint64 lock_height = 3;
  if (this->_internal_lock_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_lock_height(), target);
  }

  // bytes excess = 6;
  if (!this->_internal_excess().empty()) {
    const std::string& _s = this->_internal_excess();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tari.rpc.Signature excess_sig = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *_impl_.excess_sig_, _impl_.excess_sig_->GetCachedSize(), target, stream);
  }

  // bytes hash = 8;
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  // uint32 version = 9;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_version(), target);
  }

  // bytes burn_commitment = 10;
  if (!this->_internal_burn_commitment().empty()) {
    const std::string& _s = this->_internal_burn_commitment();
    target = stream->WriteBytesMaybeAliased(10, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.TransactionKernel)
  return target;
}

::size_t TransactionKernel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.TransactionKernel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes excess = 6;
  if (!this->_internal_excess().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_excess());
  }

  // bytes hash = 8;
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_hash());
  }

  // bytes burn_commitment = 10;
  if (!this->_internal_burn_commitment().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_burn_commitment());
  }

  // .tari.rpc.Signature excess_sig = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.excess_sig_);
  }

  // uint64 fee = 2;
  if (this->_internal_fee() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_fee());
  }

  // uint64 lock_height = 3;
  if (this->_internal_lock_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_lock_height());
  }

  // uint32 features = 1;
  if (this->_internal_features() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_features());
  }

  // uint32 version = 9;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void TransactionKernel::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TransactionKernel*>(&to_msg);
  auto& from = static_cast<const TransactionKernel&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.TransactionKernel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_excess().empty()) {
    _this->_internal_set_excess(from._internal_excess());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_burn_commitment().empty()) {
    _this->_internal_set_burn_commitment(from._internal_burn_commitment());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.excess_sig_ != nullptr);
    if (_this->_impl_.excess_sig_ == nullptr) {
      _this->_impl_.excess_sig_ =
          ::google::protobuf::Message::CopyConstruct<::tari::rpc::Signature>(arena, *from._impl_.excess_sig_);
    } else {
      _this->_impl_.excess_sig_->MergeFrom(*from._impl_.excess_sig_);
    }
  }
  if (from._internal_fee() != 0) {
    _this->_impl_.fee_ = from._impl_.fee_;
  }
  if (from._internal_lock_height() != 0) {
    _this->_impl_.lock_height_ = from._impl_.lock_height_;
  }
  if (from._internal_features() != 0) {
    _this->_impl_.features_ = from._impl_.features_;
  }
  if (from._internal_version() != 0) {
    _this->_impl_.version_ = from._impl_.version_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionKernel::CopyFrom(const TransactionKernel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.TransactionKernel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TransactionKernel::IsInitialized() const {
  return true;
}

void TransactionKernel::InternalSwap(TransactionKernel* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.excess_, &other->_impl_.excess_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, &other->_impl_.hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.burn_commitment_, &other->_impl_.burn_commitment_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.version_)
      + sizeof(TransactionKernel::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(TransactionKernel, _impl_.excess_sig_)>(
          reinterpret_cast<char*>(&_impl_.excess_sig_),
          reinterpret_cast<char*>(&other->_impl_.excess_sig_));
}

::google::protobuf::Metadata TransactionKernel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_transaction_2eproto_getter,
                                   &descriptor_table_transaction_2eproto_once,
                                   file_level_metadata_transaction_2eproto[0]);
}
// ===================================================================

class TransactionInput::_Internal {
 public:
  using HasBits = decltype(std::declval<TransactionInput>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_._has_bits_);
};

void TransactionInput::clear_script_signature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.script_signature_ != nullptr) _impl_.script_signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TransactionInput::clear_metadata_signature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.metadata_signature_ != nullptr) _impl_.metadata_signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
TransactionInput::TransactionInput(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.TransactionInput)
}
inline PROTOBUF_NDEBUG_INLINE TransactionInput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        commitment_(arena, from.commitment_),
        hash_(arena, from.hash_),
        script_(arena, from.script_),
        input_data_(arena, from.input_data_),
        sender_offset_public_key_(arena, from.sender_offset_public_key_),
        output_hash_(arena, from.output_hash_),
        covenant_(arena, from.covenant_),
        encrypted_data_(arena, from.encrypted_data_),
        rangeproof_hash_(arena, from.rangeproof_hash_) {}

TransactionInput::TransactionInput(
    ::google::protobuf::Arena* arena,
    const TransactionInput& from)
    : ::google::protobuf::Message(arena) {
  TransactionInput* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.features_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tari::rpc::OutputFeatures>(
                              arena, *from._impl_.features_)
                        : nullptr;
  _impl_.script_signature_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tari::rpc::ComAndPubSignature>(
                              arena, *from._impl_.script_signature_)
                        : nullptr;
  _impl_.metadata_signature_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tari::rpc::ComAndPubSignature>(
                              arena, *from._impl_.metadata_signature_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, minimum_value_promise_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, minimum_value_promise_),
           offsetof(Impl_, version_) -
               offsetof(Impl_, minimum_value_promise_) +
               sizeof(Impl_::version_));

  // @@protoc_insertion_point(copy_constructor:tari.rpc.TransactionInput)
}
inline PROTOBUF_NDEBUG_INLINE TransactionInput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        commitment_(arena),
        hash_(arena),
        script_(arena),
        input_data_(arena),
        sender_offset_public_key_(arena),
        output_hash_(arena),
        covenant_(arena),
        encrypted_data_(arena),
        rangeproof_hash_(arena) {}

inline void TransactionInput::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, features_),
           0,
           offsetof(Impl_, version_) -
               offsetof(Impl_, features_) +
               sizeof(Impl_::version_));
}
TransactionInput::~TransactionInput() {
  // @@protoc_insertion_point(destructor:tari.rpc.TransactionInput)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TransactionInput::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.commitment_.Destroy();
  _impl_.hash_.Destroy();
  _impl_.script_.Destroy();
  _impl_.input_data_.Destroy();
  _impl_.sender_offset_public_key_.Destroy();
  _impl_.output_hash_.Destroy();
  _impl_.covenant_.Destroy();
  _impl_.encrypted_data_.Destroy();
  _impl_.rangeproof_hash_.Destroy();
  delete _impl_.features_;
  delete _impl_.script_signature_;
  delete _impl_.metadata_signature_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
TransactionInput::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_._cached_size_),
              false,
          },
          &TransactionInput::MergeImpl,
          &TransactionInput::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void TransactionInput::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.TransactionInput)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.commitment_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _impl_.script_.ClearToEmpty();
  _impl_.input_data_.ClearToEmpty();
  _impl_.sender_offset_public_key_.ClearToEmpty();
  _impl_.output_hash_.ClearToEmpty();
  _impl_.covenant_.ClearToEmpty();
  _impl_.encrypted_data_.ClearToEmpty();
  _impl_.rangeproof_hash_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.features_ != nullptr);
      _impl_.features_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.script_signature_ != nullptr);
      _impl_.script_signature_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.metadata_signature_ != nullptr);
      _impl_.metadata_signature_->Clear();
    }
  }
  ::memset(&_impl_.minimum_value_promise_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.minimum_value_promise_)) + sizeof(_impl_.version_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TransactionInput::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 3, 0, 2> TransactionInput::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934560,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TransactionInput_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tari::rpc::TransactionInput>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tari.rpc.OutputFeatures features = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.features_)}},
    // bytes commitment = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.commitment_)}},
    // bytes hash = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.hash_)}},
    // bytes script = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.script_)}},
    // bytes input_data = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.input_data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .tari.rpc.ComAndPubSignature script_signature = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 1, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.script_signature_)}},
    // bytes sender_offset_public_key = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.sender_offset_public_key_)}},
    // bytes output_hash = 9;
    {::_pbi::TcParser::FastBS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.output_hash_)}},
    // bytes covenant = 10;
    {::_pbi::TcParser::FastBS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.covenant_)}},
    // uint32 version = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TransactionInput, _impl_.version_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.version_)}},
    // bytes encrypted_data = 12;
    {::_pbi::TcParser::FastBS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.encrypted_data_)}},
    // uint64 minimum_value_promise = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TransactionInput, _impl_.minimum_value_promise_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.minimum_value_promise_)}},
    // .tari.rpc.ComAndPubSignature metadata_signature = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 2, 2, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.metadata_signature_)}},
    // bytes rangeproof_hash = 15;
    {::_pbi::TcParser::FastBS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.rangeproof_hash_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tari.rpc.OutputFeatures features = 1;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.features_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes commitment = 2;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.commitment_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes hash = 3;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes script = 4;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.script_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes input_data = 5;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.input_data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tari.rpc.ComAndPubSignature script_signature = 7;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.script_signature_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes sender_offset_public_key = 8;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.sender_offset_public_key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes output_hash = 9;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.output_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes covenant = 10;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.covenant_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint32 version = 11;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bytes encrypted_data = 12;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.encrypted_data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint64 minimum_value_promise = 13;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.minimum_value_promise_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // .tari.rpc.ComAndPubSignature metadata_signature = 14;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.metadata_signature_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes rangeproof_hash = 15;
    {PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.rangeproof_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tari::rpc::OutputFeatures>()},
    {::_pbi::TcParser::GetTable<::tari::rpc::ComAndPubSignature>()},
    {::_pbi::TcParser::GetTable<::tari::rpc::ComAndPubSignature>()},
  }}, {{
  }},
};

::uint8_t* TransactionInput::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.TransactionInput)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tari.rpc.OutputFeatures features = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.features_, _impl_.features_->GetCachedSize(), target, stream);
  }

  // bytes commitment = 2;
  if (!this->_internal_commitment().empty()) {
    const std::string& _s = this->_internal_commitment();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // bytes hash = 3;
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // bytes script = 4;
  if (!this->_internal_script().empty()) {
    const std::string& _s = this->_internal_script();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // bytes input_data = 5;
  if (!this->_internal_input_data().empty()) {
    const std::string& _s = this->_internal_input_data();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  // .tari.rpc.ComAndPubSignature script_signature = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *_impl_.script_signature_, _impl_.script_signature_->GetCachedSize(), target, stream);
  }

  // bytes sender_offset_public_key = 8;
  if (!this->_internal_sender_offset_public_key().empty()) {
    const std::string& _s = this->_internal_sender_offset_public_key();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  // bytes output_hash = 9;
  if (!this->_internal_output_hash().empty()) {
    const std::string& _s = this->_internal_output_hash();
    target = stream->WriteBytesMaybeAliased(9, _s, target);
  }

  // bytes covenant = 10;
  if (!this->_internal_covenant().empty()) {
    const std::string& _s = this->_internal_covenant();
    target = stream->WriteBytesMaybeAliased(10, _s, target);
  }

  // uint32 version = 11;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_version(), target);
  }

  // bytes encrypted_data = 12;
  if (!this->_internal_encrypted_data().empty()) {
    const std::string& _s = this->_internal_encrypted_data();
    target = stream->WriteBytesMaybeAliased(12, _s, target);
  }

  // uint64 minimum_value_promise = 13;
  if (this->_internal_minimum_value_promise() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        13, this->_internal_minimum_value_promise(), target);
  }

  // .tari.rpc.ComAndPubSignature metadata_signature = 14;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, *_impl_.metadata_signature_, _impl_.metadata_signature_->GetCachedSize(), target, stream);
  }

  // bytes rangeproof_hash = 15;
  if (!this->_internal_rangeproof_hash().empty()) {
    const std::string& _s = this->_internal_rangeproof_hash();
    target = stream->WriteBytesMaybeAliased(15, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.TransactionInput)
  return target;
}

::size_t TransactionInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.TransactionInput)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes commitment = 2;
  if (!this->_internal_commitment().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_commitment());
  }

  // bytes hash = 3;
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_hash());
  }

  // bytes script = 4;
  if (!this->_internal_script().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_script());
  }

  // bytes input_data = 5;
  if (!this->_internal_input_data().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_input_data());
  }

  // bytes sender_offset_public_key = 8;
  if (!this->_internal_sender_offset_public_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_sender_offset_public_key());
  }

  // bytes output_hash = 9;
  if (!this->_internal_output_hash().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_output_hash());
  }

  // bytes covenant = 10;
  if (!this->_internal_covenant().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_covenant());
  }

  // bytes encrypted_data = 12;
  if (!this->_internal_encrypted_data().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_encrypted_data());
  }

  // bytes rangeproof_hash = 15;
  if (!this->_internal_rangeproof_hash().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_rangeproof_hash());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .tari.rpc.OutputFeatures features = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.features_);
    }

    // .tari.rpc.ComAndPubSignature script_signature = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.script_signature_);
    }

    // .tari.rpc.ComAndPubSignature metadata_signature = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.metadata_signature_);
    }

  }
  // uint64 minimum_value_promise = 13;
  if (this->_internal_minimum_value_promise() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_minimum_value_promise());
  }

  // uint32 version = 11;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void TransactionInput::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TransactionInput*>(&to_msg);
  auto& from = static_cast<const TransactionInput&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.TransactionInput)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_commitment().empty()) {
    _this->_internal_set_commitment(from._internal_commitment());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_script().empty()) {
    _this->_internal_set_script(from._internal_script());
  }
  if (!from._internal_input_data().empty()) {
    _this->_internal_set_input_data(from._internal_input_data());
  }
  if (!from._internal_sender_offset_public_key().empty()) {
    _this->_internal_set_sender_offset_public_key(from._internal_sender_offset_public_key());
  }
  if (!from._internal_output_hash().empty()) {
    _this->_internal_set_output_hash(from._internal_output_hash());
  }
  if (!from._internal_covenant().empty()) {
    _this->_internal_set_covenant(from._internal_covenant());
  }
  if (!from._internal_encrypted_data().empty()) {
    _this->_internal_set_encrypted_data(from._internal_encrypted_data());
  }
  if (!from._internal_rangeproof_hash().empty()) {
    _this->_internal_set_rangeproof_hash(from._internal_rangeproof_hash());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.features_ != nullptr);
      if (_this->_impl_.features_ == nullptr) {
        _this->_impl_.features_ =
            ::google::protobuf::Message::CopyConstruct<::tari::rpc::OutputFeatures>(arena, *from._impl_.features_);
      } else {
        _this->_impl_.features_->MergeFrom(*from._impl_.features_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.script_signature_ != nullptr);
      if (_this->_impl_.script_signature_ == nullptr) {
        _this->_impl_.script_signature_ =
            ::google::protobuf::Message::CopyConstruct<::tari::rpc::ComAndPubSignature>(arena, *from._impl_.script_signature_);
      } else {
        _this->_impl_.script_signature_->MergeFrom(*from._impl_.script_signature_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.metadata_signature_ != nullptr);
      if (_this->_impl_.metadata_signature_ == nullptr) {
        _this->_impl_.metadata_signature_ =
            ::google::protobuf::Message::CopyConstruct<::tari::rpc::ComAndPubSignature>(arena, *from._impl_.metadata_signature_);
      } else {
        _this->_impl_.metadata_signature_->MergeFrom(*from._impl_.metadata_signature_);
      }
    }
  }
  if (from._internal_minimum_value_promise() != 0) {
    _this->_impl_.minimum_value_promise_ = from._impl_.minimum_value_promise_;
  }
  if (from._internal_version() != 0) {
    _this->_impl_.version_ = from._impl_.version_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionInput::CopyFrom(const TransactionInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.TransactionInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TransactionInput::IsInitialized() const {
  return true;
}

void TransactionInput::InternalSwap(TransactionInput* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.commitment_, &other->_impl_.commitment_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, &other->_impl_.hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.script_, &other->_impl_.script_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.input_data_, &other->_impl_.input_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_offset_public_key_, &other->_impl_.sender_offset_public_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.output_hash_, &other->_impl_.output_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.covenant_, &other->_impl_.covenant_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encrypted_data_, &other->_impl_.encrypted_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rangeproof_hash_, &other->_impl_.rangeproof_hash_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.version_)
      + sizeof(TransactionInput::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(TransactionInput, _impl_.features_)>(
          reinterpret_cast<char*>(&_impl_.features_),
          reinterpret_cast<char*>(&other->_impl_.features_));
}

::google::protobuf::Metadata TransactionInput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_transaction_2eproto_getter,
                                   &descriptor_table_transaction_2eproto_once,
                                   file_level_metadata_transaction_2eproto[1]);
}
// ===================================================================

class TransactionOutput::_Internal {
 public:
  using HasBits = decltype(std::declval<TransactionOutput>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_._has_bits_);
};

void TransactionOutput::clear_range_proof() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.range_proof_ != nullptr) _impl_.range_proof_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TransactionOutput::clear_metadata_signature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.metadata_signature_ != nullptr) _impl_.metadata_signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
TransactionOutput::TransactionOutput(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.TransactionOutput)
}
inline PROTOBUF_NDEBUG_INLINE TransactionOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        commitment_(arena, from.commitment_),
        hash_(arena, from.hash_),
        script_(arena, from.script_),
        sender_offset_public_key_(arena, from.sender_offset_public_key_),
        covenant_(arena, from.covenant_),
        encrypted_data_(arena, from.encrypted_data_) {}

TransactionOutput::TransactionOutput(
    ::google::protobuf::Arena* arena,
    const TransactionOutput& from)
    : ::google::protobuf::Message(arena) {
  TransactionOutput* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.features_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tari::rpc::OutputFeatures>(
                              arena, *from._impl_.features_)
                        : nullptr;
  _impl_.range_proof_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tari::rpc::RangeProof>(
                              arena, *from._impl_.range_proof_)
                        : nullptr;
  _impl_.metadata_signature_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tari::rpc::ComAndPubSignature>(
                              arena, *from._impl_.metadata_signature_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, minimum_value_promise_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, minimum_value_promise_),
           offsetof(Impl_, version_) -
               offsetof(Impl_, minimum_value_promise_) +
               sizeof(Impl_::version_));

  // @@protoc_insertion_point(copy_constructor:tari.rpc.TransactionOutput)
}
inline PROTOBUF_NDEBUG_INLINE TransactionOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        commitment_(arena),
        hash_(arena),
        script_(arena),
        sender_offset_public_key_(arena),
        covenant_(arena),
        encrypted_data_(arena) {}

inline void TransactionOutput::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, features_),
           0,
           offsetof(Impl_, version_) -
               offsetof(Impl_, features_) +
               sizeof(Impl_::version_));
}
TransactionOutput::~TransactionOutput() {
  // @@protoc_insertion_point(destructor:tari.rpc.TransactionOutput)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TransactionOutput::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.commitment_.Destroy();
  _impl_.hash_.Destroy();
  _impl_.script_.Destroy();
  _impl_.sender_offset_public_key_.Destroy();
  _impl_.covenant_.Destroy();
  _impl_.encrypted_data_.Destroy();
  delete _impl_.features_;
  delete _impl_.range_proof_;
  delete _impl_.metadata_signature_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
TransactionOutput::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_._cached_size_),
              false,
          },
          &TransactionOutput::MergeImpl,
          &TransactionOutput::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void TransactionOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.TransactionOutput)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.commitment_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _impl_.script_.ClearToEmpty();
  _impl_.sender_offset_public_key_.ClearToEmpty();
  _impl_.covenant_.ClearToEmpty();
  _impl_.encrypted_data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.features_ != nullptr);
      _impl_.features_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.range_proof_ != nullptr);
      _impl_.range_proof_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.metadata_signature_ != nullptr);
      _impl_.metadata_signature_->Clear();
    }
  }
  ::memset(&_impl_.minimum_value_promise_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.minimum_value_promise_)) + sizeof(_impl_.version_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TransactionOutput::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 3, 0, 2> TransactionOutput::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TransactionOutput_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tari::rpc::TransactionOutput>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tari.rpc.OutputFeatures features = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.features_)}},
    // bytes commitment = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.commitment_)}},
    // .tari.rpc.RangeProof range_proof = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.range_proof_)}},
    // bytes hash = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.hash_)}},
    // bytes script = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.script_)}},
    // bytes sender_offset_public_key = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.sender_offset_public_key_)}},
    // .tari.rpc.ComAndPubSignature metadata_signature = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 2, 2, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.metadata_signature_)}},
    // bytes covenant = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.covenant_)}},
    // uint32 version = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TransactionOutput, _impl_.version_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.version_)}},
    // bytes encrypted_data = 10;
    {::_pbi::TcParser::FastBS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.encrypted_data_)}},
    // uint64 minimum_value_promise = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TransactionOutput, _impl_.minimum_value_promise_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.minimum_value_promise_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .tari.rpc.OutputFeatures features = 1;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.features_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes commitment = 2;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.commitment_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tari.rpc.RangeProof range_proof = 3;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.range_proof_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes hash = 4;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes script = 5;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.script_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes sender_offset_public_key = 6;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.sender_offset_public_key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tari.rpc.ComAndPubSignature metadata_signature = 7;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.metadata_signature_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes covenant = 8;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.covenant_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint32 version = 9;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bytes encrypted_data = 10;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.encrypted_data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint64 minimum_value_promise = 11;
    {PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.minimum_value_promise_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tari::rpc::OutputFeatures>()},
    {::_pbi::TcParser::GetTable<::tari::rpc::RangeProof>()},
    {::_pbi::TcParser::GetTable<::tari::rpc::ComAndPubSignature>()},
  }}, {{
  }},
};

::uint8_t* TransactionOutput::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.TransactionOutput)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tari.rpc.OutputFeatures features = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.features_, _impl_.features_->GetCachedSize(), target, stream);
  }

  // bytes commitment = 2;
  if (!this->_internal_commitment().empty()) {
    const std::string& _s = this->_internal_commitment();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // .tari.rpc.RangeProof range_proof = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.range_proof_, _impl_.range_proof_->GetCachedSize(), target, stream);
  }

  // bytes hash = 4;
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // bytes script = 5;
  if (!this->_internal_script().empty()) {
    const std::string& _s = this->_internal_script();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  // bytes sender_offset_public_key = 6;
  if (!this->_internal_sender_offset_public_key().empty()) {
    const std::string& _s = this->_internal_sender_offset_public_key();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // .tari.rpc.ComAndPubSignature metadata_signature = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *_impl_.metadata_signature_, _impl_.metadata_signature_->GetCachedSize(), target, stream);
  }

  // bytes covenant = 8;
  if (!this->_internal_covenant().empty()) {
    const std::string& _s = this->_internal_covenant();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  // uint32 version = 9;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_version(), target);
  }

  // bytes encrypted_data = 10;
  if (!this->_internal_encrypted_data().empty()) {
    const std::string& _s = this->_internal_encrypted_data();
    target = stream->WriteBytesMaybeAliased(10, _s, target);
  }

  // uint64 minimum_value_promise = 11;
  if (this->_internal_minimum_value_promise() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        11, this->_internal_minimum_value_promise(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.TransactionOutput)
  return target;
}

::size_t TransactionOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.TransactionOutput)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes commitment = 2;
  if (!this->_internal_commitment().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_commitment());
  }

  // bytes hash = 4;
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_hash());
  }

  // bytes script = 5;
  if (!this->_internal_script().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_script());
  }

  // bytes sender_offset_public_key = 6;
  if (!this->_internal_sender_offset_public_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_sender_offset_public_key());
  }

  // bytes covenant = 8;
  if (!this->_internal_covenant().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_covenant());
  }

  // bytes encrypted_data = 10;
  if (!this->_internal_encrypted_data().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_encrypted_data());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .tari.rpc.OutputFeatures features = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.features_);
    }

    // .tari.rpc.RangeProof range_proof = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.range_proof_);
    }

    // .tari.rpc.ComAndPubSignature metadata_signature = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.metadata_signature_);
    }

  }
  // uint64 minimum_value_promise = 11;
  if (this->_internal_minimum_value_promise() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_minimum_value_promise());
  }

  // uint32 version = 9;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void TransactionOutput::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TransactionOutput*>(&to_msg);
  auto& from = static_cast<const TransactionOutput&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.TransactionOutput)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_commitment().empty()) {
    _this->_internal_set_commitment(from._internal_commitment());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_script().empty()) {
    _this->_internal_set_script(from._internal_script());
  }
  if (!from._internal_sender_offset_public_key().empty()) {
    _this->_internal_set_sender_offset_public_key(from._internal_sender_offset_public_key());
  }
  if (!from._internal_covenant().empty()) {
    _this->_internal_set_covenant(from._internal_covenant());
  }
  if (!from._internal_encrypted_data().empty()) {
    _this->_internal_set_encrypted_data(from._internal_encrypted_data());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.features_ != nullptr);
      if (_this->_impl_.features_ == nullptr) {
        _this->_impl_.features_ =
            ::google::protobuf::Message::CopyConstruct<::tari::rpc::OutputFeatures>(arena, *from._impl_.features_);
      } else {
        _this->_impl_.features_->MergeFrom(*from._impl_.features_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.range_proof_ != nullptr);
      if (_this->_impl_.range_proof_ == nullptr) {
        _this->_impl_.range_proof_ =
            ::google::protobuf::Message::CopyConstruct<::tari::rpc::RangeProof>(arena, *from._impl_.range_proof_);
      } else {
        _this->_impl_.range_proof_->MergeFrom(*from._impl_.range_proof_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.metadata_signature_ != nullptr);
      if (_this->_impl_.metadata_signature_ == nullptr) {
        _this->_impl_.metadata_signature_ =
            ::google::protobuf::Message::CopyConstruct<::tari::rpc::ComAndPubSignature>(arena, *from._impl_.metadata_signature_);
      } else {
        _this->_impl_.metadata_signature_->MergeFrom(*from._impl_.metadata_signature_);
      }
    }
  }
  if (from._internal_minimum_value_promise() != 0) {
    _this->_impl_.minimum_value_promise_ = from._impl_.minimum_value_promise_;
  }
  if (from._internal_version() != 0) {
    _this->_impl_.version_ = from._impl_.version_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionOutput::CopyFrom(const TransactionOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.TransactionOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TransactionOutput::IsInitialized() const {
  return true;
}

void TransactionOutput::InternalSwap(TransactionOutput* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.commitment_, &other->_impl_.commitment_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, &other->_impl_.hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.script_, &other->_impl_.script_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_offset_public_key_, &other->_impl_.sender_offset_public_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.covenant_, &other->_impl_.covenant_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encrypted_data_, &other->_impl_.encrypted_data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.version_)
      + sizeof(TransactionOutput::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(TransactionOutput, _impl_.features_)>(
          reinterpret_cast<char*>(&_impl_.features_),
          reinterpret_cast<char*>(&other->_impl_.features_));
}

::google::protobuf::Metadata TransactionOutput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_transaction_2eproto_getter,
                                   &descriptor_table_transaction_2eproto_once,
                                   file_level_metadata_transaction_2eproto[2]);
}
// ===================================================================

class OutputFeatures::_Internal {
 public:
  using HasBits = decltype(std::declval<OutputFeatures>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_._has_bits_);
};

void OutputFeatures::clear_sidechain_feature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.sidechain_feature_ != nullptr) _impl_.sidechain_feature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
OutputFeatures::OutputFeatures(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.OutputFeatures)
}
inline PROTOBUF_NDEBUG_INLINE OutputFeatures::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        coinbase_extra_(arena, from.coinbase_extra_) {}

OutputFeatures::OutputFeatures(
    ::google::protobuf::Arena* arena,
    const OutputFeatures& from)
    : ::google::protobuf::Message(arena) {
  OutputFeatures* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.sidechain_feature_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tari::rpc::SideChainFeature>(
                              arena, *from._impl_.sidechain_feature_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, version_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, version_),
           offsetof(Impl_, range_proof_type_) -
               offsetof(Impl_, version_) +
               sizeof(Impl_::range_proof_type_));

  // @@protoc_insertion_point(copy_constructor:tari.rpc.OutputFeatures)
}
inline PROTOBUF_NDEBUG_INLINE OutputFeatures::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        coinbase_extra_(arena) {}

inline void OutputFeatures::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sidechain_feature_),
           0,
           offsetof(Impl_, range_proof_type_) -
               offsetof(Impl_, sidechain_feature_) +
               sizeof(Impl_::range_proof_type_));
}
OutputFeatures::~OutputFeatures() {
  // @@protoc_insertion_point(destructor:tari.rpc.OutputFeatures)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OutputFeatures::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.coinbase_extra_.Destroy();
  delete _impl_.sidechain_feature_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
OutputFeatures::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_._cached_size_),
              false,
          },
          &OutputFeatures::MergeImpl,
          &OutputFeatures::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void OutputFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.OutputFeatures)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.coinbase_extra_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.sidechain_feature_ != nullptr);
    _impl_.sidechain_feature_->Clear();
  }
  ::memset(&_impl_.version_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.range_proof_type_) -
      reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.range_proof_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OutputFeatures::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 0, 2> OutputFeatures::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_OutputFeatures_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tari::rpc::OutputFeatures>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 version = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OutputFeatures, _impl_.version_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.version_)}},
    // uint32 output_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OutputFeatures, _impl_.output_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.output_type_)}},
    // uint64 maturity = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(OutputFeatures, _impl_.maturity_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.maturity_)}},
    // bytes coinbase_extra = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.coinbase_extra_)}},
    // .tari.rpc.SideChainFeature sidechain_feature = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.sidechain_feature_)}},
    // uint32 range_proof_type = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OutputFeatures, _impl_.range_proof_type_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.range_proof_type_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 version = 1;
    {PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 output_type = 2;
    {PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.output_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint64 maturity = 3;
    {PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.maturity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // bytes coinbase_extra = 4;
    {PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.coinbase_extra_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tari.rpc.SideChainFeature sidechain_feature = 5;
    {PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.sidechain_feature_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 range_proof_type = 6;
    {PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.range_proof_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tari::rpc::SideChainFeature>()},
  }}, {{
  }},
};

::uint8_t* OutputFeatures::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.OutputFeatures)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_version(), target);
  }

  // uint32 output_type = 2;
  if (this->_internal_output_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_output_type(), target);
  }

  // uint64 maturity = 3;
  if (this->_internal_maturity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_maturity(), target);
  }

  // bytes coinbase_extra = 4;
  if (!this->_internal_coinbase_extra().empty()) {
    const std::string& _s = this->_internal_coinbase_extra();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tari.rpc.SideChainFeature sidechain_feature = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *_impl_.sidechain_feature_, _impl_.sidechain_feature_->GetCachedSize(), target, stream);
  }

  // uint32 range_proof_type = 6;
  if (this->_internal_range_proof_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_range_proof_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.OutputFeatures)
  return target;
}

::size_t OutputFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.OutputFeatures)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes coinbase_extra = 4;
  if (!this->_internal_coinbase_extra().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_coinbase_extra());
  }

  // .tari.rpc.SideChainFeature sidechain_feature = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.sidechain_feature_);
  }

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_version());
  }

  // uint32 output_type = 2;
  if (this->_internal_output_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_output_type());
  }

  // uint64 maturity = 3;
  if (this->_internal_maturity() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_maturity());
  }

  // uint32 range_proof_type = 6;
  if (this->_internal_range_proof_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_range_proof_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void OutputFeatures::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<OutputFeatures*>(&to_msg);
  auto& from = static_cast<const OutputFeatures&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.OutputFeatures)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_coinbase_extra().empty()) {
    _this->_internal_set_coinbase_extra(from._internal_coinbase_extra());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.sidechain_feature_ != nullptr);
    if (_this->_impl_.sidechain_feature_ == nullptr) {
      _this->_impl_.sidechain_feature_ =
          ::google::protobuf::Message::CopyConstruct<::tari::rpc::SideChainFeature>(arena, *from._impl_.sidechain_feature_);
    } else {
      _this->_impl_.sidechain_feature_->MergeFrom(*from._impl_.sidechain_feature_);
    }
  }
  if (from._internal_version() != 0) {
    _this->_impl_.version_ = from._impl_.version_;
  }
  if (from._internal_output_type() != 0) {
    _this->_impl_.output_type_ = from._impl_.output_type_;
  }
  if (from._internal_maturity() != 0) {
    _this->_impl_.maturity_ = from._impl_.maturity_;
  }
  if (from._internal_range_proof_type() != 0) {
    _this->_impl_.range_proof_type_ = from._impl_.range_proof_type_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OutputFeatures::CopyFrom(const OutputFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.OutputFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OutputFeatures::IsInitialized() const {
  return true;
}

void OutputFeatures::InternalSwap(OutputFeatures* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.coinbase_extra_, &other->_impl_.coinbase_extra_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.range_proof_type_)
      + sizeof(OutputFeatures::_impl_.range_proof_type_)
      - PROTOBUF_FIELD_OFFSET(OutputFeatures, _impl_.sidechain_feature_)>(
          reinterpret_cast<char*>(&_impl_.sidechain_feature_),
          reinterpret_cast<char*>(&other->_impl_.sidechain_feature_));
}

::google::protobuf::Metadata OutputFeatures::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_transaction_2eproto_getter,
                                   &descriptor_table_transaction_2eproto_once,
                                   file_level_metadata_transaction_2eproto[3]);
}
// ===================================================================

class AggregateBody::_Internal {
 public:
};

AggregateBody::AggregateBody(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.AggregateBody)
}
inline PROTOBUF_NDEBUG_INLINE AggregateBody::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : inputs_{visibility, arena, from.inputs_},
        outputs_{visibility, arena, from.outputs_},
        kernels_{visibility, arena, from.kernels_},
        _cached_size_{0} {}

AggregateBody::AggregateBody(
    ::google::protobuf::Arena* arena,
    const AggregateBody& from)
    : ::google::protobuf::Message(arena) {
  AggregateBody* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:tari.rpc.AggregateBody)
}
inline PROTOBUF_NDEBUG_INLINE AggregateBody::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : inputs_{visibility, arena},
        outputs_{visibility, arena},
        kernels_{visibility, arena},
        _cached_size_{0} {}

inline void AggregateBody::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AggregateBody::~AggregateBody() {
  // @@protoc_insertion_point(destructor:tari.rpc.AggregateBody)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AggregateBody::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AggregateBody::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(AggregateBody, _impl_._cached_size_),
              false,
          },
          &AggregateBody::MergeImpl,
          &AggregateBody::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void AggregateBody::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.AggregateBody)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inputs_.Clear();
  _impl_.outputs_.Clear();
  _impl_.kernels_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AggregateBody::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> AggregateBody::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AggregateBody_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tari::rpc::AggregateBody>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .tari.rpc.TransactionInput inputs = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AggregateBody, _impl_.inputs_)}},
    // repeated .tari.rpc.TransactionOutput outputs = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(AggregateBody, _impl_.outputs_)}},
    // repeated .tari.rpc.TransactionKernel kernels = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(AggregateBody, _impl_.kernels_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tari.rpc.TransactionInput inputs = 1;
    {PROTOBUF_FIELD_OFFSET(AggregateBody, _impl_.inputs_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .tari.rpc.TransactionOutput outputs = 2;
    {PROTOBUF_FIELD_OFFSET(AggregateBody, _impl_.outputs_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .tari.rpc.TransactionKernel kernels = 3;
    {PROTOBUF_FIELD_OFFSET(AggregateBody, _impl_.kernels_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tari::rpc::TransactionInput>()},
    {::_pbi::TcParser::GetTable<::tari::rpc::TransactionOutput>()},
    {::_pbi::TcParser::GetTable<::tari::rpc::TransactionKernel>()},
  }}, {{
  }},
};

::uint8_t* AggregateBody::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.AggregateBody)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .tari.rpc.TransactionInput inputs = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_inputs_size());
       i < n; i++) {
    const auto& repfield = this->_internal_inputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .tari.rpc.TransactionOutput outputs = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_outputs_size());
       i < n; i++) {
    const auto& repfield = this->_internal_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .tari.rpc.TransactionKernel kernels = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_kernels_size());
       i < n; i++) {
    const auto& repfield = this->_internal_kernels().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.AggregateBody)
  return target;
}

::size_t AggregateBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.AggregateBody)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tari.rpc.TransactionInput inputs = 1;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->_internal_inputs()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .tari.rpc.TransactionOutput outputs = 2;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->_internal_outputs()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .tari.rpc.TransactionKernel kernels = 3;
  total_size += 1UL * this->_internal_kernels_size();
  for (const auto& msg : this->_internal_kernels()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AggregateBody::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AggregateBody*>(&to_msg);
  auto& from = static_cast<const AggregateBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.AggregateBody)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_inputs()->MergeFrom(
      from._internal_inputs());
  _this->_internal_mutable_outputs()->MergeFrom(
      from._internal_outputs());
  _this->_internal_mutable_kernels()->MergeFrom(
      from._internal_kernels());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AggregateBody::CopyFrom(const AggregateBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.AggregateBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AggregateBody::IsInitialized() const {
  return true;
}

void AggregateBody::InternalSwap(AggregateBody* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.inputs_.InternalSwap(&other->_impl_.inputs_);
  _impl_.outputs_.InternalSwap(&other->_impl_.outputs_);
  _impl_.kernels_.InternalSwap(&other->_impl_.kernels_);
}

::google::protobuf::Metadata AggregateBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_transaction_2eproto_getter,
                                   &descriptor_table_transaction_2eproto_once,
                                   file_level_metadata_transaction_2eproto[4]);
}
// ===================================================================

class Transaction::_Internal {
 public:
  using HasBits = decltype(std::declval<Transaction>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Transaction, _impl_._has_bits_);
};

Transaction::Transaction(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.Transaction)
}
inline PROTOBUF_NDEBUG_INLINE Transaction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        offset_(arena, from.offset_),
        script_offset_(arena, from.script_offset_) {}

Transaction::Transaction(
    ::google::protobuf::Arena* arena,
    const Transaction& from)
    : ::google::protobuf::Message(arena) {
  Transaction* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.body_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tari::rpc::AggregateBody>(
                              arena, *from._impl_.body_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tari.rpc.Transaction)
}
inline PROTOBUF_NDEBUG_INLINE Transaction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        offset_(arena),
        script_offset_(arena) {}

inline void Transaction::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.body_ = {};
}
Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:tari.rpc.Transaction)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Transaction::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.offset_.Destroy();
  _impl_.script_offset_.Destroy();
  delete _impl_.body_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Transaction::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Transaction, _impl_._cached_size_),
              false,
          },
          &Transaction::MergeImpl,
          &Transaction::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.Transaction)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.offset_.ClearToEmpty();
  _impl_.script_offset_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.body_ != nullptr);
    _impl_.body_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> Transaction::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Transaction, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Transaction_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tari::rpc::Transaction>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bytes offset = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Transaction, _impl_.offset_)}},
    // .tari.rpc.AggregateBody body = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Transaction, _impl_.body_)}},
    // bytes script_offset = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Transaction, _impl_.script_offset_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes offset = 1;
    {PROTOBUF_FIELD_OFFSET(Transaction, _impl_.offset_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tari.rpc.AggregateBody body = 2;
    {PROTOBUF_FIELD_OFFSET(Transaction, _impl_.body_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes script_offset = 3;
    {PROTOBUF_FIELD_OFFSET(Transaction, _impl_.script_offset_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tari::rpc::AggregateBody>()},
  }}, {{
  }},
};

::uint8_t* Transaction::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.Transaction)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes offset = 1;
  if (!this->_internal_offset().empty()) {
    const std::string& _s = this->_internal_offset();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tari.rpc.AggregateBody body = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.body_, _impl_.body_->GetCachedSize(), target, stream);
  }

  // bytes script_offset = 3;
  if (!this->_internal_script_offset().empty()) {
    const std::string& _s = this->_internal_script_offset();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.Transaction)
  return target;
}

::size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.Transaction)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes offset = 1;
  if (!this->_internal_offset().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_offset());
  }

  // bytes script_offset = 3;
  if (!this->_internal_script_offset().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_script_offset());
  }

  // .tari.rpc.AggregateBody body = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.body_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Transaction::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Transaction*>(&to_msg);
  auto& from = static_cast<const Transaction&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.Transaction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_offset().empty()) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (!from._internal_script_offset().empty()) {
    _this->_internal_set_script_offset(from._internal_script_offset());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.body_ != nullptr);
    if (_this->_impl_.body_ == nullptr) {
      _this->_impl_.body_ =
          ::google::protobuf::Message::CopyConstruct<::tari::rpc::AggregateBody>(arena, *from._impl_.body_);
    } else {
      _this->_impl_.body_->MergeFrom(*from._impl_.body_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.offset_, &other->_impl_.offset_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.script_offset_, &other->_impl_.script_offset_, arena);
  swap(_impl_.body_, other->_impl_.body_);
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_transaction_2eproto_getter,
                                   &descriptor_table_transaction_2eproto_once,
                                   file_level_metadata_transaction_2eproto[5]);
}
// ===================================================================

class UnblindedOutput::_Internal {
 public:
  using HasBits = decltype(std::declval<UnblindedOutput>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_._has_bits_);
};

void UnblindedOutput::clear_metadata_signature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.metadata_signature_ != nullptr) _impl_.metadata_signature_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
UnblindedOutput::UnblindedOutput(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.UnblindedOutput)
}
inline PROTOBUF_NDEBUG_INLINE UnblindedOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        spending_key_(arena, from.spending_key_),
        script_(arena, from.script_),
        input_data_(arena, from.input_data_),
        script_private_key_(arena, from.script_private_key_),
        sender_offset_public_key_(arena, from.sender_offset_public_key_),
        covenant_(arena, from.covenant_),
        encrypted_data_(arena, from.encrypted_data_) {}

UnblindedOutput::UnblindedOutput(
    ::google::protobuf::Arena* arena,
    const UnblindedOutput& from)
    : ::google::protobuf::Message(arena) {
  UnblindedOutput* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.features_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tari::rpc::OutputFeatures>(
                              arena, *from._impl_.features_)
                        : nullptr;
  _impl_.metadata_signature_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tari::rpc::ComAndPubSignature>(
                              arena, *from._impl_.metadata_signature_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, value_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, value_),
           offsetof(Impl_, minimum_value_promise_) -
               offsetof(Impl_, value_) +
               sizeof(Impl_::minimum_value_promise_));

  // @@protoc_insertion_point(copy_constructor:tari.rpc.UnblindedOutput)
}
inline PROTOBUF_NDEBUG_INLINE UnblindedOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        spending_key_(arena),
        script_(arena),
        input_data_(arena),
        script_private_key_(arena),
        sender_offset_public_key_(arena),
        covenant_(arena),
        encrypted_data_(arena) {}

inline void UnblindedOutput::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, features_),
           0,
           offsetof(Impl_, minimum_value_promise_) -
               offsetof(Impl_, features_) +
               sizeof(Impl_::minimum_value_promise_));
}
UnblindedOutput::~UnblindedOutput() {
  // @@protoc_insertion_point(destructor:tari.rpc.UnblindedOutput)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UnblindedOutput::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.spending_key_.Destroy();
  _impl_.script_.Destroy();
  _impl_.input_data_.Destroy();
  _impl_.script_private_key_.Destroy();
  _impl_.sender_offset_public_key_.Destroy();
  _impl_.covenant_.Destroy();
  _impl_.encrypted_data_.Destroy();
  delete _impl_.features_;
  delete _impl_.metadata_signature_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
UnblindedOutput::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_._cached_size_),
              false,
          },
          &UnblindedOutput::MergeImpl,
          &UnblindedOutput::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void UnblindedOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.UnblindedOutput)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.spending_key_.ClearToEmpty();
  _impl_.script_.ClearToEmpty();
  _impl_.input_data_.ClearToEmpty();
  _impl_.script_private_key_.ClearToEmpty();
  _impl_.sender_offset_public_key_.ClearToEmpty();
  _impl_.covenant_.ClearToEmpty();
  _impl_.encrypted_data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.features_ != nullptr);
      _impl_.features_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.metadata_signature_ != nullptr);
      _impl_.metadata_signature_->Clear();
    }
  }
  ::memset(&_impl_.value_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.minimum_value_promise_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.minimum_value_promise_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* UnblindedOutput::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 2, 0, 2> UnblindedOutput::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_._has_bits_),
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959136,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_UnblindedOutput_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tari::rpc::UnblindedOutput>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 value = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(UnblindedOutput, _impl_.value_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.value_)}},
    // bytes spending_key = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.spending_key_)}},
    // .tari.rpc.OutputFeatures features = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.features_)}},
    // bytes script = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.script_)}},
    // bytes input_data = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.input_data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bytes script_private_key = 7;
    {::_pbi::TcParser::FastBS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.script_private_key_)}},
    // bytes sender_offset_public_key = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.sender_offset_public_key_)}},
    // .tari.rpc.ComAndPubSignature metadata_signature = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 1, 1, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.metadata_signature_)}},
    // uint64 script_lock_height = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(UnblindedOutput, _impl_.script_lock_height_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.script_lock_height_)}},
    // bytes covenant = 11;
    {::_pbi::TcParser::FastBS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.covenant_)}},
    // bytes encrypted_data = 12;
    {::_pbi::TcParser::FastBS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.encrypted_data_)}},
    // uint64 minimum_value_promise = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(UnblindedOutput, _impl_.minimum_value_promise_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.minimum_value_promise_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 value = 1;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // bytes spending_key = 2;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.spending_key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tari.rpc.OutputFeatures features = 3;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.features_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes script = 4;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.script_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes input_data = 5;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.input_data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes script_private_key = 7;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.script_private_key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes sender_offset_public_key = 8;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.sender_offset_public_key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .tari.rpc.ComAndPubSignature metadata_signature = 9;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.metadata_signature_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint64 script_lock_height = 10;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.script_lock_height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // bytes covenant = 11;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.covenant_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes encrypted_data = 12;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.encrypted_data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint64 minimum_value_promise = 13;
    {PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.minimum_value_promise_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tari::rpc::OutputFeatures>()},
    {::_pbi::TcParser::GetTable<::tari::rpc::ComAndPubSignature>()},
  }}, {{
  }},
};

::uint8_t* UnblindedOutput::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.UnblindedOutput)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_value(), target);
  }

  // bytes spending_key = 2;
  if (!this->_internal_spending_key().empty()) {
    const std::string& _s = this->_internal_spending_key();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tari.rpc.OutputFeatures features = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.features_, _impl_.features_->GetCachedSize(), target, stream);
  }

  // bytes script = 4;
  if (!this->_internal_script().empty()) {
    const std::string& _s = this->_internal_script();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // bytes input_data = 5;
  if (!this->_internal_input_data().empty()) {
    const std::string& _s = this->_internal_input_data();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  // bytes script_private_key = 7;
  if (!this->_internal_script_private_key().empty()) {
    const std::string& _s = this->_internal_script_private_key();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  // bytes sender_offset_public_key = 8;
  if (!this->_internal_sender_offset_public_key().empty()) {
    const std::string& _s = this->_internal_sender_offset_public_key();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  // .tari.rpc.ComAndPubSignature metadata_signature = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *_impl_.metadata_signature_, _impl_.metadata_signature_->GetCachedSize(), target, stream);
  }

  // uint64 script_lock_height = 10;
  if (this->_internal_script_lock_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        10, this->_internal_script_lock_height(), target);
  }

  // bytes covenant = 11;
  if (!this->_internal_covenant().empty()) {
    const std::string& _s = this->_internal_covenant();
    target = stream->WriteBytesMaybeAliased(11, _s, target);
  }

  // bytes encrypted_data = 12;
  if (!this->_internal_encrypted_data().empty()) {
    const std::string& _s = this->_internal_encrypted_data();
    target = stream->WriteBytesMaybeAliased(12, _s, target);
  }

  // uint64 minimum_value_promise = 13;
  if (this->_internal_minimum_value_promise() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        13, this->_internal_minimum_value_promise(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.UnblindedOutput)
  return target;
}

::size_t UnblindedOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.UnblindedOutput)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes spending_key = 2;
  if (!this->_internal_spending_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_spending_key());
  }

  // bytes script = 4;
  if (!this->_internal_script().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_script());
  }

  // bytes input_data = 5;
  if (!this->_internal_input_data().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_input_data());
  }

  // bytes script_private_key = 7;
  if (!this->_internal_script_private_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_script_private_key());
  }

  // bytes sender_offset_public_key = 8;
  if (!this->_internal_sender_offset_public_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_sender_offset_public_key());
  }

  // bytes covenant = 11;
  if (!this->_internal_covenant().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_covenant());
  }

  // bytes encrypted_data = 12;
  if (!this->_internal_encrypted_data().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_encrypted_data());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .tari.rpc.OutputFeatures features = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.features_);
    }

    // .tari.rpc.ComAndPubSignature metadata_signature = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.metadata_signature_);
    }

  }
  // uint64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_value());
  }

  // uint64 script_lock_height = 10;
  if (this->_internal_script_lock_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_script_lock_height());
  }

  // uint64 minimum_value_promise = 13;
  if (this->_internal_minimum_value_promise() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_minimum_value_promise());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void UnblindedOutput::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UnblindedOutput*>(&to_msg);
  auto& from = static_cast<const UnblindedOutput&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.UnblindedOutput)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_spending_key().empty()) {
    _this->_internal_set_spending_key(from._internal_spending_key());
  }
  if (!from._internal_script().empty()) {
    _this->_internal_set_script(from._internal_script());
  }
  if (!from._internal_input_data().empty()) {
    _this->_internal_set_input_data(from._internal_input_data());
  }
  if (!from._internal_script_private_key().empty()) {
    _this->_internal_set_script_private_key(from._internal_script_private_key());
  }
  if (!from._internal_sender_offset_public_key().empty()) {
    _this->_internal_set_sender_offset_public_key(from._internal_sender_offset_public_key());
  }
  if (!from._internal_covenant().empty()) {
    _this->_internal_set_covenant(from._internal_covenant());
  }
  if (!from._internal_encrypted_data().empty()) {
    _this->_internal_set_encrypted_data(from._internal_encrypted_data());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.features_ != nullptr);
      if (_this->_impl_.features_ == nullptr) {
        _this->_impl_.features_ =
            ::google::protobuf::Message::CopyConstruct<::tari::rpc::OutputFeatures>(arena, *from._impl_.features_);
      } else {
        _this->_impl_.features_->MergeFrom(*from._impl_.features_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.metadata_signature_ != nullptr);
      if (_this->_impl_.metadata_signature_ == nullptr) {
        _this->_impl_.metadata_signature_ =
            ::google::protobuf::Message::CopyConstruct<::tari::rpc::ComAndPubSignature>(arena, *from._impl_.metadata_signature_);
      } else {
        _this->_impl_.metadata_signature_->MergeFrom(*from._impl_.metadata_signature_);
      }
    }
  }
  if (from._internal_value() != 0) {
    _this->_impl_.value_ = from._impl_.value_;
  }
  if (from._internal_script_lock_height() != 0) {
    _this->_impl_.script_lock_height_ = from._impl_.script_lock_height_;
  }
  if (from._internal_minimum_value_promise() != 0) {
    _this->_impl_.minimum_value_promise_ = from._impl_.minimum_value_promise_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UnblindedOutput::CopyFrom(const UnblindedOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.UnblindedOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool UnblindedOutput::IsInitialized() const {
  return true;
}

void UnblindedOutput::InternalSwap(UnblindedOutput* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.spending_key_, &other->_impl_.spending_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.script_, &other->_impl_.script_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.input_data_, &other->_impl_.input_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.script_private_key_, &other->_impl_.script_private_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_offset_public_key_, &other->_impl_.sender_offset_public_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.covenant_, &other->_impl_.covenant_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encrypted_data_, &other->_impl_.encrypted_data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.minimum_value_promise_)
      + sizeof(UnblindedOutput::_impl_.minimum_value_promise_)
      - PROTOBUF_FIELD_OFFSET(UnblindedOutput, _impl_.features_)>(
          reinterpret_cast<char*>(&_impl_.features_),
          reinterpret_cast<char*>(&other->_impl_.features_));
}

::google::protobuf::Metadata UnblindedOutput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_transaction_2eproto_getter,
                                   &descriptor_table_transaction_2eproto_once,
                                   file_level_metadata_transaction_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
}  // namespace tari
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_transaction_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
