/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: network.proto */

#ifndef PROTOBUF_C_network_2eproto__INCLUDED
#define PROTOBUF_C_network_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/timestamp.pb-c.h"

typedef struct _Tari__Rpc__NodeIdentity Tari__Rpc__NodeIdentity;
typedef struct _Tari__Rpc__Peer Tari__Rpc__Peer;
typedef struct _Tari__Rpc__NetworkStatusResponse Tari__Rpc__NetworkStatusResponse;
typedef struct _Tari__Rpc__Address Tari__Rpc__Address;
typedef struct _Tari__Rpc__ListConnectedPeersResponse Tari__Rpc__ListConnectedPeersResponse;
typedef struct _Tari__Rpc__SoftwareUpdate Tari__Rpc__SoftwareUpdate;
typedef struct _Tari__Rpc__GetIdentityRequest Tari__Rpc__GetIdentityRequest;
typedef struct _Tari__Rpc__GetIdentityResponse Tari__Rpc__GetIdentityResponse;


/* --- enums --- */

typedef enum _Tari__Rpc__ConnectivityStatus {
  TARI__RPC__CONNECTIVITY_STATUS__Initializing = 0,
  TARI__RPC__CONNECTIVITY_STATUS__Online = 1,
  TARI__RPC__CONNECTIVITY_STATUS__Degraded = 2,
  TARI__RPC__CONNECTIVITY_STATUS__Offline = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TARI__RPC__CONNECTIVITY_STATUS)
} Tari__Rpc__ConnectivityStatus;

/* --- messages --- */

struct  _Tari__Rpc__NodeIdentity
{
  ProtobufCMessage base;
  ProtobufCBinaryData public_key;
  size_t n_public_addresses;
  char **public_addresses;
  ProtobufCBinaryData node_id;
};
#define TARI__RPC__NODE_IDENTITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__node_identity__descriptor) \
    , {0,NULL}, 0,NULL, {0,NULL} }


struct  _Tari__Rpc__Peer
{
  ProtobufCMessage base;
  /*
   * / Public key of the peer
   */
  ProtobufCBinaryData public_key;
  /*
   * / NodeId of the peer
   */
  ProtobufCBinaryData node_id;
  /*
   * / Peer's addresses
   */
  size_t n_addresses;
  Tari__Rpc__Address **addresses;
  /*
   * / Last connection attempt to peer
   */
  uint64_t last_connection;
  /*
   * / Flags for the peer.
   */
  uint32_t flags;
  uint64_t banned_until;
  char *banned_reason;
  uint64_t offline_at;
  /*
   * / Features supported by the peer
   */
  uint32_t features;
  /*
   * / used as information for more efficient protocol negotiation.
   */
  size_t n_supported_protocols;
  ProtobufCBinaryData *supported_protocols;
  /*
   * / User agent advertised by the peer
   */
  char *user_agent;
};
#define TARI__RPC__PEER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__peer__descriptor) \
    , {0,NULL}, {0,NULL}, 0,NULL, 0, 0, 0, (char *)protobuf_c_empty_string, 0, 0, 0,NULL, (char *)protobuf_c_empty_string }


struct  _Tari__Rpc__NetworkStatusResponse
{
  ProtobufCMessage base;
  Tari__Rpc__ConnectivityStatus status;
  uint32_t avg_latency_ms;
  uint32_t num_node_connections;
};
#define TARI__RPC__NETWORK_STATUS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__network_status_response__descriptor) \
    , TARI__RPC__CONNECTIVITY_STATUS__Initializing, 0, 0 }


struct  _Tari__Rpc__Address
{
  ProtobufCMessage base;
  ProtobufCBinaryData address;
  char *last_seen;
  uint32_t connection_attempts;
  uint64_t avg_latency;
};
#define TARI__RPC__ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__address__descriptor) \
    , {0,NULL}, (char *)protobuf_c_empty_string, 0, 0 }


struct  _Tari__Rpc__ListConnectedPeersResponse
{
  ProtobufCMessage base;
  size_t n_connected_peers;
  Tari__Rpc__Peer **connected_peers;
};
#define TARI__RPC__LIST_CONNECTED_PEERS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__list_connected_peers_response__descriptor) \
    , 0,NULL }


struct  _Tari__Rpc__SoftwareUpdate
{
  ProtobufCMessage base;
  protobuf_c_boolean has_update;
  char *version;
  char *sha;
  char *download_url;
};
#define TARI__RPC__SOFTWARE_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__software_update__descriptor) \
    , 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Tari__Rpc__GetIdentityRequest
{
  ProtobufCMessage base;
};
#define TARI__RPC__GET_IDENTITY_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_identity_request__descriptor) \
     }


struct  _Tari__Rpc__GetIdentityResponse
{
  ProtobufCMessage base;
  ProtobufCBinaryData public_key;
  char *public_address;
  ProtobufCBinaryData node_id;
};
#define TARI__RPC__GET_IDENTITY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_identity_response__descriptor) \
    , {0,NULL}, (char *)protobuf_c_empty_string, {0,NULL} }


/* Tari__Rpc__NodeIdentity methods */
void   tari__rpc__node_identity__init
                     (Tari__Rpc__NodeIdentity         *message);
size_t tari__rpc__node_identity__get_packed_size
                     (const Tari__Rpc__NodeIdentity   *message);
size_t tari__rpc__node_identity__pack
                     (const Tari__Rpc__NodeIdentity   *message,
                      uint8_t             *out);
size_t tari__rpc__node_identity__pack_to_buffer
                     (const Tari__Rpc__NodeIdentity   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__NodeIdentity *
       tari__rpc__node_identity__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__node_identity__free_unpacked
                     (Tari__Rpc__NodeIdentity *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__Peer methods */
void   tari__rpc__peer__init
                     (Tari__Rpc__Peer         *message);
size_t tari__rpc__peer__get_packed_size
                     (const Tari__Rpc__Peer   *message);
size_t tari__rpc__peer__pack
                     (const Tari__Rpc__Peer   *message,
                      uint8_t             *out);
size_t tari__rpc__peer__pack_to_buffer
                     (const Tari__Rpc__Peer   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__Peer *
       tari__rpc__peer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__peer__free_unpacked
                     (Tari__Rpc__Peer *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__NetworkStatusResponse methods */
void   tari__rpc__network_status_response__init
                     (Tari__Rpc__NetworkStatusResponse         *message);
size_t tari__rpc__network_status_response__get_packed_size
                     (const Tari__Rpc__NetworkStatusResponse   *message);
size_t tari__rpc__network_status_response__pack
                     (const Tari__Rpc__NetworkStatusResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__network_status_response__pack_to_buffer
                     (const Tari__Rpc__NetworkStatusResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__NetworkStatusResponse *
       tari__rpc__network_status_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__network_status_response__free_unpacked
                     (Tari__Rpc__NetworkStatusResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__Address methods */
void   tari__rpc__address__init
                     (Tari__Rpc__Address         *message);
size_t tari__rpc__address__get_packed_size
                     (const Tari__Rpc__Address   *message);
size_t tari__rpc__address__pack
                     (const Tari__Rpc__Address   *message,
                      uint8_t             *out);
size_t tari__rpc__address__pack_to_buffer
                     (const Tari__Rpc__Address   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__Address *
       tari__rpc__address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__address__free_unpacked
                     (Tari__Rpc__Address *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__ListConnectedPeersResponse methods */
void   tari__rpc__list_connected_peers_response__init
                     (Tari__Rpc__ListConnectedPeersResponse         *message);
size_t tari__rpc__list_connected_peers_response__get_packed_size
                     (const Tari__Rpc__ListConnectedPeersResponse   *message);
size_t tari__rpc__list_connected_peers_response__pack
                     (const Tari__Rpc__ListConnectedPeersResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__list_connected_peers_response__pack_to_buffer
                     (const Tari__Rpc__ListConnectedPeersResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__ListConnectedPeersResponse *
       tari__rpc__list_connected_peers_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__list_connected_peers_response__free_unpacked
                     (Tari__Rpc__ListConnectedPeersResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__SoftwareUpdate methods */
void   tari__rpc__software_update__init
                     (Tari__Rpc__SoftwareUpdate         *message);
size_t tari__rpc__software_update__get_packed_size
                     (const Tari__Rpc__SoftwareUpdate   *message);
size_t tari__rpc__software_update__pack
                     (const Tari__Rpc__SoftwareUpdate   *message,
                      uint8_t             *out);
size_t tari__rpc__software_update__pack_to_buffer
                     (const Tari__Rpc__SoftwareUpdate   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__SoftwareUpdate *
       tari__rpc__software_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__software_update__free_unpacked
                     (Tari__Rpc__SoftwareUpdate *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetIdentityRequest methods */
void   tari__rpc__get_identity_request__init
                     (Tari__Rpc__GetIdentityRequest         *message);
size_t tari__rpc__get_identity_request__get_packed_size
                     (const Tari__Rpc__GetIdentityRequest   *message);
size_t tari__rpc__get_identity_request__pack
                     (const Tari__Rpc__GetIdentityRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__get_identity_request__pack_to_buffer
                     (const Tari__Rpc__GetIdentityRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetIdentityRequest *
       tari__rpc__get_identity_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_identity_request__free_unpacked
                     (Tari__Rpc__GetIdentityRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetIdentityResponse methods */
void   tari__rpc__get_identity_response__init
                     (Tari__Rpc__GetIdentityResponse         *message);
size_t tari__rpc__get_identity_response__get_packed_size
                     (const Tari__Rpc__GetIdentityResponse   *message);
size_t tari__rpc__get_identity_response__pack
                     (const Tari__Rpc__GetIdentityResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__get_identity_response__pack_to_buffer
                     (const Tari__Rpc__GetIdentityResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetIdentityResponse *
       tari__rpc__get_identity_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_identity_response__free_unpacked
                     (Tari__Rpc__GetIdentityResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Tari__Rpc__NodeIdentity_Closure)
                 (const Tari__Rpc__NodeIdentity *message,
                  void *closure_data);
typedef void (*Tari__Rpc__Peer_Closure)
                 (const Tari__Rpc__Peer *message,
                  void *closure_data);
typedef void (*Tari__Rpc__NetworkStatusResponse_Closure)
                 (const Tari__Rpc__NetworkStatusResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__Address_Closure)
                 (const Tari__Rpc__Address *message,
                  void *closure_data);
typedef void (*Tari__Rpc__ListConnectedPeersResponse_Closure)
                 (const Tari__Rpc__ListConnectedPeersResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__SoftwareUpdate_Closure)
                 (const Tari__Rpc__SoftwareUpdate *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetIdentityRequest_Closure)
                 (const Tari__Rpc__GetIdentityRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetIdentityResponse_Closure)
                 (const Tari__Rpc__GetIdentityResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    tari__rpc__connectivity_status__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__node_identity__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__peer__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__network_status_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__address__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__list_connected_peers_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__software_update__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_identity_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_identity_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_network_2eproto__INCLUDED */
