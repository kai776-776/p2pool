/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: base_node.proto */

#ifndef PROTOBUF_C_base_5fnode_2eproto__INCLUDED
#define PROTOBUF_C_base_5fnode_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "types.pb-c.h"
#include "transaction.pb-c.h"
#include "block.pb-c.h"
#include "network.pb-c.h"
#include "sidechain_types.pb-c.h"

typedef struct _Tari__Rpc__GetAssetMetadataRequest Tari__Rpc__GetAssetMetadataRequest;
typedef struct _Tari__Rpc__GetAssetMetadataResponse Tari__Rpc__GetAssetMetadataResponse;
typedef struct _Tari__Rpc__ListAssetRegistrationsRequest Tari__Rpc__ListAssetRegistrationsRequest;
typedef struct _Tari__Rpc__ListAssetRegistrationsResponse Tari__Rpc__ListAssetRegistrationsResponse;
typedef struct _Tari__Rpc__GetTokensRequest Tari__Rpc__GetTokensRequest;
typedef struct _Tari__Rpc__GetTokensResponse Tari__Rpc__GetTokensResponse;
typedef struct _Tari__Rpc__SubmitBlockResponse Tari__Rpc__SubmitBlockResponse;
typedef struct _Tari__Rpc__BlockBlobRequest Tari__Rpc__BlockBlobRequest;
typedef struct _Tari__Rpc__TipInfoResponse Tari__Rpc__TipInfoResponse;
typedef struct _Tari__Rpc__NewBlockTemplateResponse Tari__Rpc__NewBlockTemplateResponse;
typedef struct _Tari__Rpc__NewBlockTemplateRequest Tari__Rpc__NewBlockTemplateRequest;
typedef struct _Tari__Rpc__NetworkDifficultyResponse Tari__Rpc__NetworkDifficultyResponse;
typedef struct _Tari__Rpc__ValueAtHeightResponse Tari__Rpc__ValueAtHeightResponse;
typedef struct _Tari__Rpc__IntegerValue Tari__Rpc__IntegerValue;
typedef struct _Tari__Rpc__StringValue Tari__Rpc__StringValue;
typedef struct _Tari__Rpc__BlockGroupRequest Tari__Rpc__BlockGroupRequest;
typedef struct _Tari__Rpc__BlockGroupResponse Tari__Rpc__BlockGroupResponse;
typedef struct _Tari__Rpc__HeightRequest Tari__Rpc__HeightRequest;
typedef struct _Tari__Rpc__BlockTimingResponse Tari__Rpc__BlockTimingResponse;
typedef struct _Tari__Rpc__GetHeaderByHashRequest Tari__Rpc__GetHeaderByHashRequest;
typedef struct _Tari__Rpc__BlockHeaderResponse Tari__Rpc__BlockHeaderResponse;
typedef struct _Tari__Rpc__ListHeadersRequest Tari__Rpc__ListHeadersRequest;
typedef struct _Tari__Rpc__GetBlocksRequest Tari__Rpc__GetBlocksRequest;
typedef struct _Tari__Rpc__GetBlocksResponse Tari__Rpc__GetBlocksResponse;
typedef struct _Tari__Rpc__MetaData Tari__Rpc__MetaData;
typedef struct _Tari__Rpc__SyncInfoResponse Tari__Rpc__SyncInfoResponse;
typedef struct _Tari__Rpc__SyncProgressResponse Tari__Rpc__SyncProgressResponse;
typedef struct _Tari__Rpc__GetNewBlockResult Tari__Rpc__GetNewBlockResult;
typedef struct _Tari__Rpc__GetNewBlockBlobResult Tari__Rpc__GetNewBlockBlobResult;
typedef struct _Tari__Rpc__MinerData Tari__Rpc__MinerData;
typedef struct _Tari__Rpc__SearchKernelsRequest Tari__Rpc__SearchKernelsRequest;
typedef struct _Tari__Rpc__SearchUtxosRequest Tari__Rpc__SearchUtxosRequest;
typedef struct _Tari__Rpc__FetchMatchingUtxosRequest Tari__Rpc__FetchMatchingUtxosRequest;
typedef struct _Tari__Rpc__FetchMatchingUtxosResponse Tari__Rpc__FetchMatchingUtxosResponse;
typedef struct _Tari__Rpc__GetPeersResponse Tari__Rpc__GetPeersResponse;
typedef struct _Tari__Rpc__GetPeersRequest Tari__Rpc__GetPeersRequest;
typedef struct _Tari__Rpc__SubmitTransactionRequest Tari__Rpc__SubmitTransactionRequest;
typedef struct _Tari__Rpc__SubmitTransactionResponse Tari__Rpc__SubmitTransactionResponse;
typedef struct _Tari__Rpc__GetMempoolTransactionsRequest Tari__Rpc__GetMempoolTransactionsRequest;
typedef struct _Tari__Rpc__GetMempoolTransactionsResponse Tari__Rpc__GetMempoolTransactionsResponse;
typedef struct _Tari__Rpc__TransactionStateRequest Tari__Rpc__TransactionStateRequest;
typedef struct _Tari__Rpc__TransactionStateResponse Tari__Rpc__TransactionStateResponse;
typedef struct _Tari__Rpc__MempoolStatsResponse Tari__Rpc__MempoolStatsResponse;
typedef struct _Tari__Rpc__GetActiveValidatorNodesRequest Tari__Rpc__GetActiveValidatorNodesRequest;
typedef struct _Tari__Rpc__GetActiveValidatorNodesResponse Tari__Rpc__GetActiveValidatorNodesResponse;
typedef struct _Tari__Rpc__GetShardKeyRequest Tari__Rpc__GetShardKeyRequest;
typedef struct _Tari__Rpc__GetShardKeyResponse Tari__Rpc__GetShardKeyResponse;
typedef struct _Tari__Rpc__GetTemplateRegistrationsRequest Tari__Rpc__GetTemplateRegistrationsRequest;
typedef struct _Tari__Rpc__GetTemplateRegistrationResponse Tari__Rpc__GetTemplateRegistrationResponse;
typedef struct _Tari__Rpc__BlockInfo Tari__Rpc__BlockInfo;
typedef struct _Tari__Rpc__GetSideChainUtxosRequest Tari__Rpc__GetSideChainUtxosRequest;
typedef struct _Tari__Rpc__GetSideChainUtxosResponse Tari__Rpc__GetSideChainUtxosResponse;


/* --- enums --- */

typedef enum _Tari__Rpc__BaseNodeState {
  TARI__RPC__BASE_NODE_STATE__START_UP = 0,
  TARI__RPC__BASE_NODE_STATE__HEADER_SYNC = 1,
  TARI__RPC__BASE_NODE_STATE__HORIZON_SYNC = 2,
  TARI__RPC__BASE_NODE_STATE__CONNECTING = 3,
  TARI__RPC__BASE_NODE_STATE__BLOCK_SYNC = 4,
  TARI__RPC__BASE_NODE_STATE__LISTENING = 5,
  TARI__RPC__BASE_NODE_STATE__SYNC_FAILED = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TARI__RPC__BASE_NODE_STATE)
} Tari__Rpc__BaseNodeState;
typedef enum _Tari__Rpc__CalcType {
  TARI__RPC__CALC_TYPE__MEAN = 0,
  TARI__RPC__CALC_TYPE__MEDIAN = 1,
  TARI__RPC__CALC_TYPE__QUANTILE = 2,
  TARI__RPC__CALC_TYPE__QUARTILE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TARI__RPC__CALC_TYPE)
} Tari__Rpc__CalcType;
typedef enum _Tari__Rpc__Sorting {
  TARI__RPC__SORTING__SORTING_DESC = 0,
  TARI__RPC__SORTING__SORTING_ASC = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TARI__RPC__SORTING)
} Tari__Rpc__Sorting;
typedef enum _Tari__Rpc__SyncState {
  TARI__RPC__SYNC_STATE__STARTUP = 0,
  TARI__RPC__SYNC_STATE__HEADER_STARTING = 1,
  TARI__RPC__SYNC_STATE__HEADER = 2,
  TARI__RPC__SYNC_STATE__BLOCK_STARTING = 3,
  TARI__RPC__SYNC_STATE__BLOCK = 4,
  TARI__RPC__SYNC_STATE__DONE = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TARI__RPC__SYNC_STATE)
} Tari__Rpc__SyncState;
typedef enum _Tari__Rpc__SubmitTransactionResult {
  TARI__RPC__SUBMIT_TRANSACTION_RESULT__NONE = 0,
  TARI__RPC__SUBMIT_TRANSACTION_RESULT__ACCEPTED = 1,
  TARI__RPC__SUBMIT_TRANSACTION_RESULT__NOT_PROCESSABLE_AT_THIS_TIME = 2,
  TARI__RPC__SUBMIT_TRANSACTION_RESULT__ALREADY_MINED = 3,
  TARI__RPC__SUBMIT_TRANSACTION_RESULT__REJECTED = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TARI__RPC__SUBMIT_TRANSACTION_RESULT)
} Tari__Rpc__SubmitTransactionResult;
typedef enum _Tari__Rpc__TransactionLocation {
  TARI__RPC__TRANSACTION_LOCATION__UNKNOWN = 0,
  TARI__RPC__TRANSACTION_LOCATION__MEMPOOL = 1,
  TARI__RPC__TRANSACTION_LOCATION__MINED = 2,
  TARI__RPC__TRANSACTION_LOCATION__NOT_STORED = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TARI__RPC__TRANSACTION_LOCATION)
} Tari__Rpc__TransactionLocation;

/* --- messages --- */

struct  _Tari__Rpc__GetAssetMetadataRequest
{
  ProtobufCMessage base;
  ProtobufCBinaryData asset_public_key;
};
#define TARI__RPC__GET_ASSET_METADATA_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_asset_metadata_request__descriptor) \
    , {0,NULL} }


struct  _Tari__Rpc__GetAssetMetadataResponse
{
  ProtobufCMessage base;
  char *name;
  char *description;
  char *image;
  ProtobufCBinaryData owner_commitment;
  Tari__Rpc__OutputFeatures *features;
  uint64_t mined_height;
  ProtobufCBinaryData mined_in_block;
};
#define TARI__RPC__GET_ASSET_METADATA_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_asset_metadata_response__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, NULL, 0, {0,NULL} }


struct  _Tari__Rpc__ListAssetRegistrationsRequest
{
  ProtobufCMessage base;
  uint64_t offset;
  uint64_t count;
};
#define TARI__RPC__LIST_ASSET_REGISTRATIONS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__list_asset_registrations_request__descriptor) \
    , 0, 0 }


struct  _Tari__Rpc__ListAssetRegistrationsResponse
{
  ProtobufCMessage base;
  ProtobufCBinaryData asset_public_key;
  ProtobufCBinaryData unique_id;
  ProtobufCBinaryData owner_commitment;
  uint64_t mined_height;
  ProtobufCBinaryData mined_in_block;
  Tari__Rpc__OutputFeatures *features;
  ProtobufCBinaryData script;
};
#define TARI__RPC__LIST_ASSET_REGISTRATIONS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__list_asset_registrations_response__descriptor) \
    , {0,NULL}, {0,NULL}, {0,NULL}, 0, {0,NULL}, NULL, {0,NULL} }


struct  _Tari__Rpc__GetTokensRequest
{
  ProtobufCMessage base;
  ProtobufCBinaryData asset_public_key;
  /*
   * Optionally get a set of specific unique_ids
   */
  size_t n_unique_ids;
  ProtobufCBinaryData *unique_ids;
};
#define TARI__RPC__GET_TOKENS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_tokens_request__descriptor) \
    , {0,NULL}, 0,NULL }


struct  _Tari__Rpc__GetTokensResponse
{
  ProtobufCMessage base;
  ProtobufCBinaryData unique_id;
  ProtobufCBinaryData asset_public_key;
  ProtobufCBinaryData owner_commitment;
  ProtobufCBinaryData mined_in_block;
  uint64_t mined_height;
  Tari__Rpc__OutputFeatures *features;
  ProtobufCBinaryData script;
};
#define TARI__RPC__GET_TOKENS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_tokens_response__descriptor) \
    , {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL}, 0, NULL, {0,NULL} }


struct  _Tari__Rpc__SubmitBlockResponse
{
  ProtobufCMessage base;
  ProtobufCBinaryData block_hash;
};
#define TARI__RPC__SUBMIT_BLOCK_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__submit_block_response__descriptor) \
    , {0,NULL} }


struct  _Tari__Rpc__BlockBlobRequest
{
  ProtobufCMessage base;
  ProtobufCBinaryData header_blob;
  ProtobufCBinaryData body_blob;
};
#define TARI__RPC__BLOCK_BLOB_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__block_blob_request__descriptor) \
    , {0,NULL}, {0,NULL} }


/*
 * / return type of GetTipInfo
 */
struct  _Tari__Rpc__TipInfoResponse
{
  ProtobufCMessage base;
  Tari__Rpc__MetaData *metadata;
  protobuf_c_boolean initial_sync_achieved;
  Tari__Rpc__BaseNodeState base_node_state;
};
#define TARI__RPC__TIP_INFO_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__tip_info_response__descriptor) \
    , NULL, 0, TARI__RPC__BASE_NODE_STATE__START_UP }


/*
 * / return type of GetNewBlockTemplate
 */
struct  _Tari__Rpc__NewBlockTemplateResponse
{
  ProtobufCMessage base;
  Tari__Rpc__NewBlockTemplate *new_block_template;
  protobuf_c_boolean initial_sync_achieved;
  Tari__Rpc__MinerData *miner_data;
};
#define TARI__RPC__NEW_BLOCK_TEMPLATE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__new_block_template_response__descriptor) \
    , NULL, 0, NULL }


/*
 * / return type of NewBlockTemplateRequest
 */
struct  _Tari__Rpc__NewBlockTemplateRequest
{
  ProtobufCMessage base;
  Tari__Rpc__PowAlgo *algo;
  /*
   *This field should be moved to optional once optional keyword is standard
   */
  uint64_t max_weight;
};
#define TARI__RPC__NEW_BLOCK_TEMPLATE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__new_block_template_request__descriptor) \
    , NULL, 0 }


/*
 * Network difficulty response
 */
struct  _Tari__Rpc__NetworkDifficultyResponse
{
  ProtobufCMessage base;
  uint64_t difficulty;
  uint64_t estimated_hash_rate;
  uint64_t height;
  uint64_t timestamp;
  uint64_t pow_algo;
  uint64_t sha3x_estimated_hash_rate;
  uint64_t randomx_estimated_hash_rate;
};
#define TARI__RPC__NETWORK_DIFFICULTY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__network_difficulty_response__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


/*
 * A generic single value response for a specific height
 */
struct  _Tari__Rpc__ValueAtHeightResponse
{
  ProtobufCMessage base;
  uint64_t value;
  uint64_t height;
};
#define TARI__RPC__VALUE_AT_HEIGHT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__value_at_height_response__descriptor) \
    , 0, 0 }


/*
 * A generic uint value
 */
struct  _Tari__Rpc__IntegerValue
{
  ProtobufCMessage base;
  uint64_t value;
};
#define TARI__RPC__INTEGER_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__integer_value__descriptor) \
    , 0 }


/*
 * A generic String value
 */
struct  _Tari__Rpc__StringValue
{
  ProtobufCMessage base;
  char *value;
};
#define TARI__RPC__STRING_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__string_value__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * / GetBlockSize / GetBlockFees Request
 * / Either the starting and ending heights OR the from_tip param must be specified
 */
struct  _Tari__Rpc__BlockGroupRequest
{
  ProtobufCMessage base;
  /*
   * The height from the chain tip (optional)
   */
  uint64_t from_tip;
  /*
   * The starting height (optional)
   */
  uint64_t start_height;
  /*
   * The ending height (optional)
   */
  uint64_t end_height;
  /*
   * / The type of calculation required (optional)
   * / Defaults to median
   * / median, mean, quartile, quantile
   */
  Tari__Rpc__CalcType calc_type;
};
#define TARI__RPC__BLOCK_GROUP_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__block_group_request__descriptor) \
    , 0, 0, 0, TARI__RPC__CALC_TYPE__MEAN }


/*
 * / GetBlockSize / GetBlockFees  Response
 */
struct  _Tari__Rpc__BlockGroupResponse
{
  ProtobufCMessage base;
  size_t n_value;
  double *value;
  Tari__Rpc__CalcType calc_type;
};
#define TARI__RPC__BLOCK_GROUP_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__block_group_response__descriptor) \
    , 0,NULL, TARI__RPC__CALC_TYPE__MEAN }


/*
 * The request used for querying a function that requires a height, either between 2 points or from the chain tip
 * If start_height and end_height are set and > 0, they take precedence, otherwise from_tip is used
 */
struct  _Tari__Rpc__HeightRequest
{
  ProtobufCMessage base;
  /*
   * The height from the chain tip (optional)
   */
  uint64_t from_tip;
  /*
   * The starting height (optional)
   */
  uint64_t start_height;
  /*
   * The ending height (optional)
   */
  uint64_t end_height;
};
#define TARI__RPC__HEIGHT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__height_request__descriptor) \
    , 0, 0, 0 }


/*
 * The return type of the rpc GetBlockTiming
 */
struct  _Tari__Rpc__BlockTimingResponse
{
  ProtobufCMessage base;
  uint64_t max;
  uint64_t min;
  double avg;
};
#define TARI__RPC__BLOCK_TIMING_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__block_timing_response__descriptor) \
    , 0, 0, 0 }


/*
 * Request that returns a header based by hash
 */
struct  _Tari__Rpc__GetHeaderByHashRequest
{
  ProtobufCMessage base;
  /*
   * The hash of the block header
   */
  ProtobufCBinaryData hash;
};
#define TARI__RPC__GET_HEADER_BY_HASH_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_header_by_hash_request__descriptor) \
    , {0,NULL} }


struct  _Tari__Rpc__BlockHeaderResponse
{
  ProtobufCMessage base;
  /*
   * The block header
   */
  Tari__Rpc__BlockHeader *header;
  /*
   * The number of blocks from the tip of this block (a.k.a depth)
   */
  uint64_t confirmations;
  /*
   * The block reward i.e mining reward + fees
   */
  uint64_t reward;
  /*
   * Achieved difficulty
   */
  uint64_t difficulty;
  /*
   * The number of transactions contained in the block
   */
  uint32_t num_transactions;
};
#define TARI__RPC__BLOCK_HEADER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__block_header_response__descriptor) \
    , NULL, 0, 0, 0, 0 }


/*
 * The request used for querying headers from the base node. The parameters `from_height` and `num_headers` can be used
 * to page through the current best chain.
 */
struct  _Tari__Rpc__ListHeadersRequest
{
  ProtobufCMessage base;
  /*
   * The height to start at. Depending on sorting, will either default to use the tip or genesis block, for `SORTING_DESC`
   * and `SORTING_ASC` respectively, if a value is not provided. The first header returned will be at this height
   * followed by `num_headers` - 1 headers in the direction specified by `sorting`. If greater than the current tip,
   * the current tip will be used.
   */
  uint64_t from_height;
  /*
   * The number of headers to return. If not specified, it will default to 10
   */
  uint64_t num_headers;
  /*
   * The ordering to return the headers in. If not specified will default to SORTING_DESC. Note that if `from_height`
   * is not specified or is 0, if `sorting` is SORTING_DESC, the tip will be used as `from_height`, otherwise the
   * block at height 0 will be used.
   */
  Tari__Rpc__Sorting sorting;
};
#define TARI__RPC__LIST_HEADERS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__list_headers_request__descriptor) \
    , 0, 0, TARI__RPC__SORTING__SORTING_DESC }


/*
 * The request used for querying blocks in the base node's current best chain. Currently only querying by height is
 * available. Multiple blocks may be queried.e.g. [189092,100023,122424]. The order in which they are returned is not
 * guaranteed.
 */
struct  _Tari__Rpc__GetBlocksRequest
{
  ProtobufCMessage base;
  size_t n_heights;
  uint64_t *heights;
};
#define TARI__RPC__GET_BLOCKS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_blocks_request__descriptor) \
    , 0,NULL }


/*
 * The return type of the rpc GetBlocks. Blocks are not guaranteed to be returned in the order requested.
 */
struct  _Tari__Rpc__GetBlocksResponse
{
  ProtobufCMessage base;
  size_t n_blocks;
  Tari__Rpc__HistoricalBlock **blocks;
};
#define TARI__RPC__GET_BLOCKS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_blocks_response__descriptor) \
    , 0,NULL }


struct  _Tari__Rpc__MetaData
{
  ProtobufCMessage base;
  /*
   * The current chain height, or the block number of the longest valid chain, or `None` if there is no chain
   */
  uint64_t height_of_longest_chain;
  /*
   * The block hash of the current tip of the longest valid chain, or `None` for an empty chain
   */
  ProtobufCBinaryData best_block;
  /*
   * This is the min height this node can provide complete blocks for. A 0 here means this node is archival and can provide complete blocks for every height.
   */
  uint64_t pruned_height;
  /*
   * The current geometric mean of the pow of the chain tip, or `None` if there is no chain
   */
  ProtobufCBinaryData accumulated_difficulty;
};
#define TARI__RPC__META_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__meta_data__descriptor) \
    , 0, {0,NULL}, 0, {0,NULL} }


struct  _Tari__Rpc__SyncInfoResponse
{
  ProtobufCMessage base;
  uint64_t tip_height;
  uint64_t local_height;
  size_t n_peer_node_id;
  ProtobufCBinaryData *peer_node_id;
};
#define TARI__RPC__SYNC_INFO_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__sync_info_response__descriptor) \
    , 0, 0, 0,NULL }


struct  _Tari__Rpc__SyncProgressResponse
{
  ProtobufCMessage base;
  uint64_t tip_height;
  uint64_t local_height;
  Tari__Rpc__SyncState state;
};
#define TARI__RPC__SYNC_PROGRESS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__sync_progress_response__descriptor) \
    , 0, 0, TARI__RPC__SYNC_STATE__STARTUP }


/*
 * This is the message that is returned for a miner after it asks for a new block.
 */
struct  _Tari__Rpc__GetNewBlockResult
{
  ProtobufCMessage base;
  /*
   * This is the header hash of the completed block
   */
  ProtobufCBinaryData block_hash;
  /*
   * This is the completed block
   */
  Tari__Rpc__Block *block;
  ProtobufCBinaryData merge_mining_hash;
  ProtobufCBinaryData tari_unique_id;
};
#define TARI__RPC__GET_NEW_BLOCK_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_new_block_result__descriptor) \
    , {0,NULL}, NULL, {0,NULL}, {0,NULL} }


/*
 * This is the message that is returned for a miner after it asks for a new block.
 */
struct  _Tari__Rpc__GetNewBlockBlobResult
{
  ProtobufCMessage base;
  /*
   * This is the header hash of the completed block
   */
  ProtobufCBinaryData block_hash;
  /*
   * This is the completed block's header
   */
  ProtobufCBinaryData header;
  /*
   * This is the completed block's body
   */
  ProtobufCBinaryData block_body;
  ProtobufCBinaryData merge_mining_hash;
  ProtobufCBinaryData utxo_mr;
  ProtobufCBinaryData tari_unique_id;
};
#define TARI__RPC__GET_NEW_BLOCK_BLOB_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_new_block_blob_result__descriptor) \
    , {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL} }


/*
 * This is mining data for the miner asking for a new block
 */
struct  _Tari__Rpc__MinerData
{
  ProtobufCMessage base;
  Tari__Rpc__PowAlgo *algo;
  uint64_t target_difficulty;
  uint64_t reward;
  /*
   *    bytes merge_mining_hash =4;
   */
  uint64_t total_fees;
};
#define TARI__RPC__MINER_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__miner_data__descriptor) \
    , NULL, 0, 0, 0 }


/*
 * This is the request type for the Search Kernels rpc
 */
struct  _Tari__Rpc__SearchKernelsRequest
{
  ProtobufCMessage base;
  size_t n_signatures;
  Tari__Rpc__Signature **signatures;
};
#define TARI__RPC__SEARCH_KERNELS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__search_kernels_request__descriptor) \
    , 0,NULL }


/*
 * This is the request type for the Search Utxo rpc
 */
struct  _Tari__Rpc__SearchUtxosRequest
{
  ProtobufCMessage base;
  size_t n_commitments;
  ProtobufCBinaryData *commitments;
};
#define TARI__RPC__SEARCH_UTXOS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__search_utxos_request__descriptor) \
    , 0,NULL }


struct  _Tari__Rpc__FetchMatchingUtxosRequest
{
  ProtobufCMessage base;
  size_t n_hashes;
  ProtobufCBinaryData *hashes;
};
#define TARI__RPC__FETCH_MATCHING_UTXOS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__fetch_matching_utxos_request__descriptor) \
    , 0,NULL }


struct  _Tari__Rpc__FetchMatchingUtxosResponse
{
  ProtobufCMessage base;
  Tari__Rpc__TransactionOutput *output;
};
#define TARI__RPC__FETCH_MATCHING_UTXOS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__fetch_matching_utxos_response__descriptor) \
    , NULL }


/*
 * This is the request type of the get all peers rpc call
 */
struct  _Tari__Rpc__GetPeersResponse
{
  ProtobufCMessage base;
  Tari__Rpc__Peer *peer;
};
#define TARI__RPC__GET_PEERS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_peers_response__descriptor) \
    , NULL }


struct  _Tari__Rpc__GetPeersRequest
{
  ProtobufCMessage base;
};
#define TARI__RPC__GET_PEERS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_peers_request__descriptor) \
     }


struct  _Tari__Rpc__SubmitTransactionRequest
{
  ProtobufCMessage base;
  Tari__Rpc__Transaction *transaction;
};
#define TARI__RPC__SUBMIT_TRANSACTION_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__submit_transaction_request__descriptor) \
    , NULL }


struct  _Tari__Rpc__SubmitTransactionResponse
{
  ProtobufCMessage base;
  Tari__Rpc__SubmitTransactionResult result;
};
#define TARI__RPC__SUBMIT_TRANSACTION_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__submit_transaction_response__descriptor) \
    , TARI__RPC__SUBMIT_TRANSACTION_RESULT__NONE }


struct  _Tari__Rpc__GetMempoolTransactionsRequest
{
  ProtobufCMessage base;
};
#define TARI__RPC__GET_MEMPOOL_TRANSACTIONS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_mempool_transactions_request__descriptor) \
     }


struct  _Tari__Rpc__GetMempoolTransactionsResponse
{
  ProtobufCMessage base;
  Tari__Rpc__Transaction *transaction;
};
#define TARI__RPC__GET_MEMPOOL_TRANSACTIONS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_mempool_transactions_response__descriptor) \
    , NULL }


struct  _Tari__Rpc__TransactionStateRequest
{
  ProtobufCMessage base;
  Tari__Rpc__Signature *excess_sig;
};
#define TARI__RPC__TRANSACTION_STATE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__transaction_state_request__descriptor) \
    , NULL }


struct  _Tari__Rpc__TransactionStateResponse
{
  ProtobufCMessage base;
  Tari__Rpc__TransactionLocation result;
};
#define TARI__RPC__TRANSACTION_STATE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__transaction_state_response__descriptor) \
    , TARI__RPC__TRANSACTION_LOCATION__UNKNOWN }


struct  _Tari__Rpc__MempoolStatsResponse
{
  ProtobufCMessage base;
  uint64_t unconfirmed_txs;
  uint64_t reorg_txs;
  uint64_t unconfirmed_weight;
};
#define TARI__RPC__MEMPOOL_STATS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__mempool_stats_response__descriptor) \
    , 0, 0, 0 }


struct  _Tari__Rpc__GetActiveValidatorNodesRequest
{
  ProtobufCMessage base;
  uint64_t height;
};
#define TARI__RPC__GET_ACTIVE_VALIDATOR_NODES_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_active_validator_nodes_request__descriptor) \
    , 0 }


struct  _Tari__Rpc__GetActiveValidatorNodesResponse
{
  ProtobufCMessage base;
  ProtobufCBinaryData shard_key;
  ProtobufCBinaryData public_key;
};
#define TARI__RPC__GET_ACTIVE_VALIDATOR_NODES_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_active_validator_nodes_response__descriptor) \
    , {0,NULL}, {0,NULL} }


struct  _Tari__Rpc__GetShardKeyRequest
{
  ProtobufCMessage base;
  uint64_t height;
  ProtobufCBinaryData public_key;
};
#define TARI__RPC__GET_SHARD_KEY_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_shard_key_request__descriptor) \
    , 0, {0,NULL} }


struct  _Tari__Rpc__GetShardKeyResponse
{
  ProtobufCMessage base;
  ProtobufCBinaryData shard_key;
  protobuf_c_boolean found;
};
#define TARI__RPC__GET_SHARD_KEY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_shard_key_response__descriptor) \
    , {0,NULL}, 0 }


struct  _Tari__Rpc__GetTemplateRegistrationsRequest
{
  ProtobufCMessage base;
  ProtobufCBinaryData start_hash;
  uint64_t count;
};
#define TARI__RPC__GET_TEMPLATE_REGISTRATIONS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_template_registrations_request__descriptor) \
    , {0,NULL}, 0 }


struct  _Tari__Rpc__GetTemplateRegistrationResponse
{
  ProtobufCMessage base;
  ProtobufCBinaryData utxo_hash;
  Tari__Rpc__TemplateRegistration *registration;
};
#define TARI__RPC__GET_TEMPLATE_REGISTRATION_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_template_registration_response__descriptor) \
    , {0,NULL}, NULL }


struct  _Tari__Rpc__BlockInfo
{
  ProtobufCMessage base;
  uint64_t height;
  ProtobufCBinaryData hash;
  ProtobufCBinaryData next_block_hash;
};
#define TARI__RPC__BLOCK_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__block_info__descriptor) \
    , 0, {0,NULL}, {0,NULL} }


struct  _Tari__Rpc__GetSideChainUtxosRequest
{
  ProtobufCMessage base;
  ProtobufCBinaryData start_hash;
  uint64_t count;
};
#define TARI__RPC__GET_SIDE_CHAIN_UTXOS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_side_chain_utxos_request__descriptor) \
    , {0,NULL}, 0 }


struct  _Tari__Rpc__GetSideChainUtxosResponse
{
  ProtobufCMessage base;
  Tari__Rpc__BlockInfo *block_info;
  size_t n_outputs;
  Tari__Rpc__TransactionOutput **outputs;
};
#define TARI__RPC__GET_SIDE_CHAIN_UTXOS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__get_side_chain_utxos_response__descriptor) \
    , NULL, 0,NULL }


/* Tari__Rpc__GetAssetMetadataRequest methods */
void   tari__rpc__get_asset_metadata_request__init
                     (Tari__Rpc__GetAssetMetadataRequest         *message);
size_t tari__rpc__get_asset_metadata_request__get_packed_size
                     (const Tari__Rpc__GetAssetMetadataRequest   *message);
size_t tari__rpc__get_asset_metadata_request__pack
                     (const Tari__Rpc__GetAssetMetadataRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__get_asset_metadata_request__pack_to_buffer
                     (const Tari__Rpc__GetAssetMetadataRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetAssetMetadataRequest *
       tari__rpc__get_asset_metadata_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_asset_metadata_request__free_unpacked
                     (Tari__Rpc__GetAssetMetadataRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetAssetMetadataResponse methods */
void   tari__rpc__get_asset_metadata_response__init
                     (Tari__Rpc__GetAssetMetadataResponse         *message);
size_t tari__rpc__get_asset_metadata_response__get_packed_size
                     (const Tari__Rpc__GetAssetMetadataResponse   *message);
size_t tari__rpc__get_asset_metadata_response__pack
                     (const Tari__Rpc__GetAssetMetadataResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__get_asset_metadata_response__pack_to_buffer
                     (const Tari__Rpc__GetAssetMetadataResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetAssetMetadataResponse *
       tari__rpc__get_asset_metadata_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_asset_metadata_response__free_unpacked
                     (Tari__Rpc__GetAssetMetadataResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__ListAssetRegistrationsRequest methods */
void   tari__rpc__list_asset_registrations_request__init
                     (Tari__Rpc__ListAssetRegistrationsRequest         *message);
size_t tari__rpc__list_asset_registrations_request__get_packed_size
                     (const Tari__Rpc__ListAssetRegistrationsRequest   *message);
size_t tari__rpc__list_asset_registrations_request__pack
                     (const Tari__Rpc__ListAssetRegistrationsRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__list_asset_registrations_request__pack_to_buffer
                     (const Tari__Rpc__ListAssetRegistrationsRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__ListAssetRegistrationsRequest *
       tari__rpc__list_asset_registrations_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__list_asset_registrations_request__free_unpacked
                     (Tari__Rpc__ListAssetRegistrationsRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__ListAssetRegistrationsResponse methods */
void   tari__rpc__list_asset_registrations_response__init
                     (Tari__Rpc__ListAssetRegistrationsResponse         *message);
size_t tari__rpc__list_asset_registrations_response__get_packed_size
                     (const Tari__Rpc__ListAssetRegistrationsResponse   *message);
size_t tari__rpc__list_asset_registrations_response__pack
                     (const Tari__Rpc__ListAssetRegistrationsResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__list_asset_registrations_response__pack_to_buffer
                     (const Tari__Rpc__ListAssetRegistrationsResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__ListAssetRegistrationsResponse *
       tari__rpc__list_asset_registrations_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__list_asset_registrations_response__free_unpacked
                     (Tari__Rpc__ListAssetRegistrationsResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetTokensRequest methods */
void   tari__rpc__get_tokens_request__init
                     (Tari__Rpc__GetTokensRequest         *message);
size_t tari__rpc__get_tokens_request__get_packed_size
                     (const Tari__Rpc__GetTokensRequest   *message);
size_t tari__rpc__get_tokens_request__pack
                     (const Tari__Rpc__GetTokensRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__get_tokens_request__pack_to_buffer
                     (const Tari__Rpc__GetTokensRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetTokensRequest *
       tari__rpc__get_tokens_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_tokens_request__free_unpacked
                     (Tari__Rpc__GetTokensRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetTokensResponse methods */
void   tari__rpc__get_tokens_response__init
                     (Tari__Rpc__GetTokensResponse         *message);
size_t tari__rpc__get_tokens_response__get_packed_size
                     (const Tari__Rpc__GetTokensResponse   *message);
size_t tari__rpc__get_tokens_response__pack
                     (const Tari__Rpc__GetTokensResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__get_tokens_response__pack_to_buffer
                     (const Tari__Rpc__GetTokensResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetTokensResponse *
       tari__rpc__get_tokens_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_tokens_response__free_unpacked
                     (Tari__Rpc__GetTokensResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__SubmitBlockResponse methods */
void   tari__rpc__submit_block_response__init
                     (Tari__Rpc__SubmitBlockResponse         *message);
size_t tari__rpc__submit_block_response__get_packed_size
                     (const Tari__Rpc__SubmitBlockResponse   *message);
size_t tari__rpc__submit_block_response__pack
                     (const Tari__Rpc__SubmitBlockResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__submit_block_response__pack_to_buffer
                     (const Tari__Rpc__SubmitBlockResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__SubmitBlockResponse *
       tari__rpc__submit_block_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__submit_block_response__free_unpacked
                     (Tari__Rpc__SubmitBlockResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__BlockBlobRequest methods */
void   tari__rpc__block_blob_request__init
                     (Tari__Rpc__BlockBlobRequest         *message);
size_t tari__rpc__block_blob_request__get_packed_size
                     (const Tari__Rpc__BlockBlobRequest   *message);
size_t tari__rpc__block_blob_request__pack
                     (const Tari__Rpc__BlockBlobRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__block_blob_request__pack_to_buffer
                     (const Tari__Rpc__BlockBlobRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__BlockBlobRequest *
       tari__rpc__block_blob_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__block_blob_request__free_unpacked
                     (Tari__Rpc__BlockBlobRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__TipInfoResponse methods */
void   tari__rpc__tip_info_response__init
                     (Tari__Rpc__TipInfoResponse         *message);
size_t tari__rpc__tip_info_response__get_packed_size
                     (const Tari__Rpc__TipInfoResponse   *message);
size_t tari__rpc__tip_info_response__pack
                     (const Tari__Rpc__TipInfoResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__tip_info_response__pack_to_buffer
                     (const Tari__Rpc__TipInfoResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__TipInfoResponse *
       tari__rpc__tip_info_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__tip_info_response__free_unpacked
                     (Tari__Rpc__TipInfoResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__NewBlockTemplateResponse methods */
void   tari__rpc__new_block_template_response__init
                     (Tari__Rpc__NewBlockTemplateResponse         *message);
size_t tari__rpc__new_block_template_response__get_packed_size
                     (const Tari__Rpc__NewBlockTemplateResponse   *message);
size_t tari__rpc__new_block_template_response__pack
                     (const Tari__Rpc__NewBlockTemplateResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__new_block_template_response__pack_to_buffer
                     (const Tari__Rpc__NewBlockTemplateResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__NewBlockTemplateResponse *
       tari__rpc__new_block_template_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__new_block_template_response__free_unpacked
                     (Tari__Rpc__NewBlockTemplateResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__NewBlockTemplateRequest methods */
void   tari__rpc__new_block_template_request__init
                     (Tari__Rpc__NewBlockTemplateRequest         *message);
size_t tari__rpc__new_block_template_request__get_packed_size
                     (const Tari__Rpc__NewBlockTemplateRequest   *message);
size_t tari__rpc__new_block_template_request__pack
                     (const Tari__Rpc__NewBlockTemplateRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__new_block_template_request__pack_to_buffer
                     (const Tari__Rpc__NewBlockTemplateRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__NewBlockTemplateRequest *
       tari__rpc__new_block_template_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__new_block_template_request__free_unpacked
                     (Tari__Rpc__NewBlockTemplateRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__NetworkDifficultyResponse methods */
void   tari__rpc__network_difficulty_response__init
                     (Tari__Rpc__NetworkDifficultyResponse         *message);
size_t tari__rpc__network_difficulty_response__get_packed_size
                     (const Tari__Rpc__NetworkDifficultyResponse   *message);
size_t tari__rpc__network_difficulty_response__pack
                     (const Tari__Rpc__NetworkDifficultyResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__network_difficulty_response__pack_to_buffer
                     (const Tari__Rpc__NetworkDifficultyResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__NetworkDifficultyResponse *
       tari__rpc__network_difficulty_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__network_difficulty_response__free_unpacked
                     (Tari__Rpc__NetworkDifficultyResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__ValueAtHeightResponse methods */
void   tari__rpc__value_at_height_response__init
                     (Tari__Rpc__ValueAtHeightResponse         *message);
size_t tari__rpc__value_at_height_response__get_packed_size
                     (const Tari__Rpc__ValueAtHeightResponse   *message);
size_t tari__rpc__value_at_height_response__pack
                     (const Tari__Rpc__ValueAtHeightResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__value_at_height_response__pack_to_buffer
                     (const Tari__Rpc__ValueAtHeightResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__ValueAtHeightResponse *
       tari__rpc__value_at_height_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__value_at_height_response__free_unpacked
                     (Tari__Rpc__ValueAtHeightResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__IntegerValue methods */
void   tari__rpc__integer_value__init
                     (Tari__Rpc__IntegerValue         *message);
size_t tari__rpc__integer_value__get_packed_size
                     (const Tari__Rpc__IntegerValue   *message);
size_t tari__rpc__integer_value__pack
                     (const Tari__Rpc__IntegerValue   *message,
                      uint8_t             *out);
size_t tari__rpc__integer_value__pack_to_buffer
                     (const Tari__Rpc__IntegerValue   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__IntegerValue *
       tari__rpc__integer_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__integer_value__free_unpacked
                     (Tari__Rpc__IntegerValue *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__StringValue methods */
void   tari__rpc__string_value__init
                     (Tari__Rpc__StringValue         *message);
size_t tari__rpc__string_value__get_packed_size
                     (const Tari__Rpc__StringValue   *message);
size_t tari__rpc__string_value__pack
                     (const Tari__Rpc__StringValue   *message,
                      uint8_t             *out);
size_t tari__rpc__string_value__pack_to_buffer
                     (const Tari__Rpc__StringValue   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__StringValue *
       tari__rpc__string_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__string_value__free_unpacked
                     (Tari__Rpc__StringValue *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__BlockGroupRequest methods */
void   tari__rpc__block_group_request__init
                     (Tari__Rpc__BlockGroupRequest         *message);
size_t tari__rpc__block_group_request__get_packed_size
                     (const Tari__Rpc__BlockGroupRequest   *message);
size_t tari__rpc__block_group_request__pack
                     (const Tari__Rpc__BlockGroupRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__block_group_request__pack_to_buffer
                     (const Tari__Rpc__BlockGroupRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__BlockGroupRequest *
       tari__rpc__block_group_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__block_group_request__free_unpacked
                     (Tari__Rpc__BlockGroupRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__BlockGroupResponse methods */
void   tari__rpc__block_group_response__init
                     (Tari__Rpc__BlockGroupResponse         *message);
size_t tari__rpc__block_group_response__get_packed_size
                     (const Tari__Rpc__BlockGroupResponse   *message);
size_t tari__rpc__block_group_response__pack
                     (const Tari__Rpc__BlockGroupResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__block_group_response__pack_to_buffer
                     (const Tari__Rpc__BlockGroupResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__BlockGroupResponse *
       tari__rpc__block_group_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__block_group_response__free_unpacked
                     (Tari__Rpc__BlockGroupResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__HeightRequest methods */
void   tari__rpc__height_request__init
                     (Tari__Rpc__HeightRequest         *message);
size_t tari__rpc__height_request__get_packed_size
                     (const Tari__Rpc__HeightRequest   *message);
size_t tari__rpc__height_request__pack
                     (const Tari__Rpc__HeightRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__height_request__pack_to_buffer
                     (const Tari__Rpc__HeightRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__HeightRequest *
       tari__rpc__height_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__height_request__free_unpacked
                     (Tari__Rpc__HeightRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__BlockTimingResponse methods */
void   tari__rpc__block_timing_response__init
                     (Tari__Rpc__BlockTimingResponse         *message);
size_t tari__rpc__block_timing_response__get_packed_size
                     (const Tari__Rpc__BlockTimingResponse   *message);
size_t tari__rpc__block_timing_response__pack
                     (const Tari__Rpc__BlockTimingResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__block_timing_response__pack_to_buffer
                     (const Tari__Rpc__BlockTimingResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__BlockTimingResponse *
       tari__rpc__block_timing_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__block_timing_response__free_unpacked
                     (Tari__Rpc__BlockTimingResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetHeaderByHashRequest methods */
void   tari__rpc__get_header_by_hash_request__init
                     (Tari__Rpc__GetHeaderByHashRequest         *message);
size_t tari__rpc__get_header_by_hash_request__get_packed_size
                     (const Tari__Rpc__GetHeaderByHashRequest   *message);
size_t tari__rpc__get_header_by_hash_request__pack
                     (const Tari__Rpc__GetHeaderByHashRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__get_header_by_hash_request__pack_to_buffer
                     (const Tari__Rpc__GetHeaderByHashRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetHeaderByHashRequest *
       tari__rpc__get_header_by_hash_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_header_by_hash_request__free_unpacked
                     (Tari__Rpc__GetHeaderByHashRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__BlockHeaderResponse methods */
void   tari__rpc__block_header_response__init
                     (Tari__Rpc__BlockHeaderResponse         *message);
size_t tari__rpc__block_header_response__get_packed_size
                     (const Tari__Rpc__BlockHeaderResponse   *message);
size_t tari__rpc__block_header_response__pack
                     (const Tari__Rpc__BlockHeaderResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__block_header_response__pack_to_buffer
                     (const Tari__Rpc__BlockHeaderResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__BlockHeaderResponse *
       tari__rpc__block_header_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__block_header_response__free_unpacked
                     (Tari__Rpc__BlockHeaderResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__ListHeadersRequest methods */
void   tari__rpc__list_headers_request__init
                     (Tari__Rpc__ListHeadersRequest         *message);
size_t tari__rpc__list_headers_request__get_packed_size
                     (const Tari__Rpc__ListHeadersRequest   *message);
size_t tari__rpc__list_headers_request__pack
                     (const Tari__Rpc__ListHeadersRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__list_headers_request__pack_to_buffer
                     (const Tari__Rpc__ListHeadersRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__ListHeadersRequest *
       tari__rpc__list_headers_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__list_headers_request__free_unpacked
                     (Tari__Rpc__ListHeadersRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetBlocksRequest methods */
void   tari__rpc__get_blocks_request__init
                     (Tari__Rpc__GetBlocksRequest         *message);
size_t tari__rpc__get_blocks_request__get_packed_size
                     (const Tari__Rpc__GetBlocksRequest   *message);
size_t tari__rpc__get_blocks_request__pack
                     (const Tari__Rpc__GetBlocksRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__get_blocks_request__pack_to_buffer
                     (const Tari__Rpc__GetBlocksRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetBlocksRequest *
       tari__rpc__get_blocks_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_blocks_request__free_unpacked
                     (Tari__Rpc__GetBlocksRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetBlocksResponse methods */
void   tari__rpc__get_blocks_response__init
                     (Tari__Rpc__GetBlocksResponse         *message);
size_t tari__rpc__get_blocks_response__get_packed_size
                     (const Tari__Rpc__GetBlocksResponse   *message);
size_t tari__rpc__get_blocks_response__pack
                     (const Tari__Rpc__GetBlocksResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__get_blocks_response__pack_to_buffer
                     (const Tari__Rpc__GetBlocksResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetBlocksResponse *
       tari__rpc__get_blocks_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_blocks_response__free_unpacked
                     (Tari__Rpc__GetBlocksResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__MetaData methods */
void   tari__rpc__meta_data__init
                     (Tari__Rpc__MetaData         *message);
size_t tari__rpc__meta_data__get_packed_size
                     (const Tari__Rpc__MetaData   *message);
size_t tari__rpc__meta_data__pack
                     (const Tari__Rpc__MetaData   *message,
                      uint8_t             *out);
size_t tari__rpc__meta_data__pack_to_buffer
                     (const Tari__Rpc__MetaData   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__MetaData *
       tari__rpc__meta_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__meta_data__free_unpacked
                     (Tari__Rpc__MetaData *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__SyncInfoResponse methods */
void   tari__rpc__sync_info_response__init
                     (Tari__Rpc__SyncInfoResponse         *message);
size_t tari__rpc__sync_info_response__get_packed_size
                     (const Tari__Rpc__SyncInfoResponse   *message);
size_t tari__rpc__sync_info_response__pack
                     (const Tari__Rpc__SyncInfoResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__sync_info_response__pack_to_buffer
                     (const Tari__Rpc__SyncInfoResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__SyncInfoResponse *
       tari__rpc__sync_info_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__sync_info_response__free_unpacked
                     (Tari__Rpc__SyncInfoResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__SyncProgressResponse methods */
void   tari__rpc__sync_progress_response__init
                     (Tari__Rpc__SyncProgressResponse         *message);
size_t tari__rpc__sync_progress_response__get_packed_size
                     (const Tari__Rpc__SyncProgressResponse   *message);
size_t tari__rpc__sync_progress_response__pack
                     (const Tari__Rpc__SyncProgressResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__sync_progress_response__pack_to_buffer
                     (const Tari__Rpc__SyncProgressResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__SyncProgressResponse *
       tari__rpc__sync_progress_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__sync_progress_response__free_unpacked
                     (Tari__Rpc__SyncProgressResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetNewBlockResult methods */
void   tari__rpc__get_new_block_result__init
                     (Tari__Rpc__GetNewBlockResult         *message);
size_t tari__rpc__get_new_block_result__get_packed_size
                     (const Tari__Rpc__GetNewBlockResult   *message);
size_t tari__rpc__get_new_block_result__pack
                     (const Tari__Rpc__GetNewBlockResult   *message,
                      uint8_t             *out);
size_t tari__rpc__get_new_block_result__pack_to_buffer
                     (const Tari__Rpc__GetNewBlockResult   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetNewBlockResult *
       tari__rpc__get_new_block_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_new_block_result__free_unpacked
                     (Tari__Rpc__GetNewBlockResult *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetNewBlockBlobResult methods */
void   tari__rpc__get_new_block_blob_result__init
                     (Tari__Rpc__GetNewBlockBlobResult         *message);
size_t tari__rpc__get_new_block_blob_result__get_packed_size
                     (const Tari__Rpc__GetNewBlockBlobResult   *message);
size_t tari__rpc__get_new_block_blob_result__pack
                     (const Tari__Rpc__GetNewBlockBlobResult   *message,
                      uint8_t             *out);
size_t tari__rpc__get_new_block_blob_result__pack_to_buffer
                     (const Tari__Rpc__GetNewBlockBlobResult   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetNewBlockBlobResult *
       tari__rpc__get_new_block_blob_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_new_block_blob_result__free_unpacked
                     (Tari__Rpc__GetNewBlockBlobResult *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__MinerData methods */
void   tari__rpc__miner_data__init
                     (Tari__Rpc__MinerData         *message);
size_t tari__rpc__miner_data__get_packed_size
                     (const Tari__Rpc__MinerData   *message);
size_t tari__rpc__miner_data__pack
                     (const Tari__Rpc__MinerData   *message,
                      uint8_t             *out);
size_t tari__rpc__miner_data__pack_to_buffer
                     (const Tari__Rpc__MinerData   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__MinerData *
       tari__rpc__miner_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__miner_data__free_unpacked
                     (Tari__Rpc__MinerData *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__SearchKernelsRequest methods */
void   tari__rpc__search_kernels_request__init
                     (Tari__Rpc__SearchKernelsRequest         *message);
size_t tari__rpc__search_kernels_request__get_packed_size
                     (const Tari__Rpc__SearchKernelsRequest   *message);
size_t tari__rpc__search_kernels_request__pack
                     (const Tari__Rpc__SearchKernelsRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__search_kernels_request__pack_to_buffer
                     (const Tari__Rpc__SearchKernelsRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__SearchKernelsRequest *
       tari__rpc__search_kernels_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__search_kernels_request__free_unpacked
                     (Tari__Rpc__SearchKernelsRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__SearchUtxosRequest methods */
void   tari__rpc__search_utxos_request__init
                     (Tari__Rpc__SearchUtxosRequest         *message);
size_t tari__rpc__search_utxos_request__get_packed_size
                     (const Tari__Rpc__SearchUtxosRequest   *message);
size_t tari__rpc__search_utxos_request__pack
                     (const Tari__Rpc__SearchUtxosRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__search_utxos_request__pack_to_buffer
                     (const Tari__Rpc__SearchUtxosRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__SearchUtxosRequest *
       tari__rpc__search_utxos_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__search_utxos_request__free_unpacked
                     (Tari__Rpc__SearchUtxosRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__FetchMatchingUtxosRequest methods */
void   tari__rpc__fetch_matching_utxos_request__init
                     (Tari__Rpc__FetchMatchingUtxosRequest         *message);
size_t tari__rpc__fetch_matching_utxos_request__get_packed_size
                     (const Tari__Rpc__FetchMatchingUtxosRequest   *message);
size_t tari__rpc__fetch_matching_utxos_request__pack
                     (const Tari__Rpc__FetchMatchingUtxosRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__fetch_matching_utxos_request__pack_to_buffer
                     (const Tari__Rpc__FetchMatchingUtxosRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__FetchMatchingUtxosRequest *
       tari__rpc__fetch_matching_utxos_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__fetch_matching_utxos_request__free_unpacked
                     (Tari__Rpc__FetchMatchingUtxosRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__FetchMatchingUtxosResponse methods */
void   tari__rpc__fetch_matching_utxos_response__init
                     (Tari__Rpc__FetchMatchingUtxosResponse         *message);
size_t tari__rpc__fetch_matching_utxos_response__get_packed_size
                     (const Tari__Rpc__FetchMatchingUtxosResponse   *message);
size_t tari__rpc__fetch_matching_utxos_response__pack
                     (const Tari__Rpc__FetchMatchingUtxosResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__fetch_matching_utxos_response__pack_to_buffer
                     (const Tari__Rpc__FetchMatchingUtxosResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__FetchMatchingUtxosResponse *
       tari__rpc__fetch_matching_utxos_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__fetch_matching_utxos_response__free_unpacked
                     (Tari__Rpc__FetchMatchingUtxosResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetPeersResponse methods */
void   tari__rpc__get_peers_response__init
                     (Tari__Rpc__GetPeersResponse         *message);
size_t tari__rpc__get_peers_response__get_packed_size
                     (const Tari__Rpc__GetPeersResponse   *message);
size_t tari__rpc__get_peers_response__pack
                     (const Tari__Rpc__GetPeersResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__get_peers_response__pack_to_buffer
                     (const Tari__Rpc__GetPeersResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetPeersResponse *
       tari__rpc__get_peers_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_peers_response__free_unpacked
                     (Tari__Rpc__GetPeersResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetPeersRequest methods */
void   tari__rpc__get_peers_request__init
                     (Tari__Rpc__GetPeersRequest         *message);
size_t tari__rpc__get_peers_request__get_packed_size
                     (const Tari__Rpc__GetPeersRequest   *message);
size_t tari__rpc__get_peers_request__pack
                     (const Tari__Rpc__GetPeersRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__get_peers_request__pack_to_buffer
                     (const Tari__Rpc__GetPeersRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetPeersRequest *
       tari__rpc__get_peers_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_peers_request__free_unpacked
                     (Tari__Rpc__GetPeersRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__SubmitTransactionRequest methods */
void   tari__rpc__submit_transaction_request__init
                     (Tari__Rpc__SubmitTransactionRequest         *message);
size_t tari__rpc__submit_transaction_request__get_packed_size
                     (const Tari__Rpc__SubmitTransactionRequest   *message);
size_t tari__rpc__submit_transaction_request__pack
                     (const Tari__Rpc__SubmitTransactionRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__submit_transaction_request__pack_to_buffer
                     (const Tari__Rpc__SubmitTransactionRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__SubmitTransactionRequest *
       tari__rpc__submit_transaction_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__submit_transaction_request__free_unpacked
                     (Tari__Rpc__SubmitTransactionRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__SubmitTransactionResponse methods */
void   tari__rpc__submit_transaction_response__init
                     (Tari__Rpc__SubmitTransactionResponse         *message);
size_t tari__rpc__submit_transaction_response__get_packed_size
                     (const Tari__Rpc__SubmitTransactionResponse   *message);
size_t tari__rpc__submit_transaction_response__pack
                     (const Tari__Rpc__SubmitTransactionResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__submit_transaction_response__pack_to_buffer
                     (const Tari__Rpc__SubmitTransactionResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__SubmitTransactionResponse *
       tari__rpc__submit_transaction_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__submit_transaction_response__free_unpacked
                     (Tari__Rpc__SubmitTransactionResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetMempoolTransactionsRequest methods */
void   tari__rpc__get_mempool_transactions_request__init
                     (Tari__Rpc__GetMempoolTransactionsRequest         *message);
size_t tari__rpc__get_mempool_transactions_request__get_packed_size
                     (const Tari__Rpc__GetMempoolTransactionsRequest   *message);
size_t tari__rpc__get_mempool_transactions_request__pack
                     (const Tari__Rpc__GetMempoolTransactionsRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__get_mempool_transactions_request__pack_to_buffer
                     (const Tari__Rpc__GetMempoolTransactionsRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetMempoolTransactionsRequest *
       tari__rpc__get_mempool_transactions_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_mempool_transactions_request__free_unpacked
                     (Tari__Rpc__GetMempoolTransactionsRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetMempoolTransactionsResponse methods */
void   tari__rpc__get_mempool_transactions_response__init
                     (Tari__Rpc__GetMempoolTransactionsResponse         *message);
size_t tari__rpc__get_mempool_transactions_response__get_packed_size
                     (const Tari__Rpc__GetMempoolTransactionsResponse   *message);
size_t tari__rpc__get_mempool_transactions_response__pack
                     (const Tari__Rpc__GetMempoolTransactionsResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__get_mempool_transactions_response__pack_to_buffer
                     (const Tari__Rpc__GetMempoolTransactionsResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetMempoolTransactionsResponse *
       tari__rpc__get_mempool_transactions_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_mempool_transactions_response__free_unpacked
                     (Tari__Rpc__GetMempoolTransactionsResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__TransactionStateRequest methods */
void   tari__rpc__transaction_state_request__init
                     (Tari__Rpc__TransactionStateRequest         *message);
size_t tari__rpc__transaction_state_request__get_packed_size
                     (const Tari__Rpc__TransactionStateRequest   *message);
size_t tari__rpc__transaction_state_request__pack
                     (const Tari__Rpc__TransactionStateRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__transaction_state_request__pack_to_buffer
                     (const Tari__Rpc__TransactionStateRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__TransactionStateRequest *
       tari__rpc__transaction_state_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__transaction_state_request__free_unpacked
                     (Tari__Rpc__TransactionStateRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__TransactionStateResponse methods */
void   tari__rpc__transaction_state_response__init
                     (Tari__Rpc__TransactionStateResponse         *message);
size_t tari__rpc__transaction_state_response__get_packed_size
                     (const Tari__Rpc__TransactionStateResponse   *message);
size_t tari__rpc__transaction_state_response__pack
                     (const Tari__Rpc__TransactionStateResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__transaction_state_response__pack_to_buffer
                     (const Tari__Rpc__TransactionStateResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__TransactionStateResponse *
       tari__rpc__transaction_state_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__transaction_state_response__free_unpacked
                     (Tari__Rpc__TransactionStateResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__MempoolStatsResponse methods */
void   tari__rpc__mempool_stats_response__init
                     (Tari__Rpc__MempoolStatsResponse         *message);
size_t tari__rpc__mempool_stats_response__get_packed_size
                     (const Tari__Rpc__MempoolStatsResponse   *message);
size_t tari__rpc__mempool_stats_response__pack
                     (const Tari__Rpc__MempoolStatsResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__mempool_stats_response__pack_to_buffer
                     (const Tari__Rpc__MempoolStatsResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__MempoolStatsResponse *
       tari__rpc__mempool_stats_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__mempool_stats_response__free_unpacked
                     (Tari__Rpc__MempoolStatsResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetActiveValidatorNodesRequest methods */
void   tari__rpc__get_active_validator_nodes_request__init
                     (Tari__Rpc__GetActiveValidatorNodesRequest         *message);
size_t tari__rpc__get_active_validator_nodes_request__get_packed_size
                     (const Tari__Rpc__GetActiveValidatorNodesRequest   *message);
size_t tari__rpc__get_active_validator_nodes_request__pack
                     (const Tari__Rpc__GetActiveValidatorNodesRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__get_active_validator_nodes_request__pack_to_buffer
                     (const Tari__Rpc__GetActiveValidatorNodesRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetActiveValidatorNodesRequest *
       tari__rpc__get_active_validator_nodes_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_active_validator_nodes_request__free_unpacked
                     (Tari__Rpc__GetActiveValidatorNodesRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetActiveValidatorNodesResponse methods */
void   tari__rpc__get_active_validator_nodes_response__init
                     (Tari__Rpc__GetActiveValidatorNodesResponse         *message);
size_t tari__rpc__get_active_validator_nodes_response__get_packed_size
                     (const Tari__Rpc__GetActiveValidatorNodesResponse   *message);
size_t tari__rpc__get_active_validator_nodes_response__pack
                     (const Tari__Rpc__GetActiveValidatorNodesResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__get_active_validator_nodes_response__pack_to_buffer
                     (const Tari__Rpc__GetActiveValidatorNodesResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetActiveValidatorNodesResponse *
       tari__rpc__get_active_validator_nodes_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_active_validator_nodes_response__free_unpacked
                     (Tari__Rpc__GetActiveValidatorNodesResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetShardKeyRequest methods */
void   tari__rpc__get_shard_key_request__init
                     (Tari__Rpc__GetShardKeyRequest         *message);
size_t tari__rpc__get_shard_key_request__get_packed_size
                     (const Tari__Rpc__GetShardKeyRequest   *message);
size_t tari__rpc__get_shard_key_request__pack
                     (const Tari__Rpc__GetShardKeyRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__get_shard_key_request__pack_to_buffer
                     (const Tari__Rpc__GetShardKeyRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetShardKeyRequest *
       tari__rpc__get_shard_key_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_shard_key_request__free_unpacked
                     (Tari__Rpc__GetShardKeyRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetShardKeyResponse methods */
void   tari__rpc__get_shard_key_response__init
                     (Tari__Rpc__GetShardKeyResponse         *message);
size_t tari__rpc__get_shard_key_response__get_packed_size
                     (const Tari__Rpc__GetShardKeyResponse   *message);
size_t tari__rpc__get_shard_key_response__pack
                     (const Tari__Rpc__GetShardKeyResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__get_shard_key_response__pack_to_buffer
                     (const Tari__Rpc__GetShardKeyResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetShardKeyResponse *
       tari__rpc__get_shard_key_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_shard_key_response__free_unpacked
                     (Tari__Rpc__GetShardKeyResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetTemplateRegistrationsRequest methods */
void   tari__rpc__get_template_registrations_request__init
                     (Tari__Rpc__GetTemplateRegistrationsRequest         *message);
size_t tari__rpc__get_template_registrations_request__get_packed_size
                     (const Tari__Rpc__GetTemplateRegistrationsRequest   *message);
size_t tari__rpc__get_template_registrations_request__pack
                     (const Tari__Rpc__GetTemplateRegistrationsRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__get_template_registrations_request__pack_to_buffer
                     (const Tari__Rpc__GetTemplateRegistrationsRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetTemplateRegistrationsRequest *
       tari__rpc__get_template_registrations_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_template_registrations_request__free_unpacked
                     (Tari__Rpc__GetTemplateRegistrationsRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetTemplateRegistrationResponse methods */
void   tari__rpc__get_template_registration_response__init
                     (Tari__Rpc__GetTemplateRegistrationResponse         *message);
size_t tari__rpc__get_template_registration_response__get_packed_size
                     (const Tari__Rpc__GetTemplateRegistrationResponse   *message);
size_t tari__rpc__get_template_registration_response__pack
                     (const Tari__Rpc__GetTemplateRegistrationResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__get_template_registration_response__pack_to_buffer
                     (const Tari__Rpc__GetTemplateRegistrationResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetTemplateRegistrationResponse *
       tari__rpc__get_template_registration_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_template_registration_response__free_unpacked
                     (Tari__Rpc__GetTemplateRegistrationResponse *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__BlockInfo methods */
void   tari__rpc__block_info__init
                     (Tari__Rpc__BlockInfo         *message);
size_t tari__rpc__block_info__get_packed_size
                     (const Tari__Rpc__BlockInfo   *message);
size_t tari__rpc__block_info__pack
                     (const Tari__Rpc__BlockInfo   *message,
                      uint8_t             *out);
size_t tari__rpc__block_info__pack_to_buffer
                     (const Tari__Rpc__BlockInfo   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__BlockInfo *
       tari__rpc__block_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__block_info__free_unpacked
                     (Tari__Rpc__BlockInfo *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetSideChainUtxosRequest methods */
void   tari__rpc__get_side_chain_utxos_request__init
                     (Tari__Rpc__GetSideChainUtxosRequest         *message);
size_t tari__rpc__get_side_chain_utxos_request__get_packed_size
                     (const Tari__Rpc__GetSideChainUtxosRequest   *message);
size_t tari__rpc__get_side_chain_utxos_request__pack
                     (const Tari__Rpc__GetSideChainUtxosRequest   *message,
                      uint8_t             *out);
size_t tari__rpc__get_side_chain_utxos_request__pack_to_buffer
                     (const Tari__Rpc__GetSideChainUtxosRequest   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetSideChainUtxosRequest *
       tari__rpc__get_side_chain_utxos_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_side_chain_utxos_request__free_unpacked
                     (Tari__Rpc__GetSideChainUtxosRequest *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__GetSideChainUtxosResponse methods */
void   tari__rpc__get_side_chain_utxos_response__init
                     (Tari__Rpc__GetSideChainUtxosResponse         *message);
size_t tari__rpc__get_side_chain_utxos_response__get_packed_size
                     (const Tari__Rpc__GetSideChainUtxosResponse   *message);
size_t tari__rpc__get_side_chain_utxos_response__pack
                     (const Tari__Rpc__GetSideChainUtxosResponse   *message,
                      uint8_t             *out);
size_t tari__rpc__get_side_chain_utxos_response__pack_to_buffer
                     (const Tari__Rpc__GetSideChainUtxosResponse   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__GetSideChainUtxosResponse *
       tari__rpc__get_side_chain_utxos_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__get_side_chain_utxos_response__free_unpacked
                     (Tari__Rpc__GetSideChainUtxosResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Tari__Rpc__GetAssetMetadataRequest_Closure)
                 (const Tari__Rpc__GetAssetMetadataRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetAssetMetadataResponse_Closure)
                 (const Tari__Rpc__GetAssetMetadataResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__ListAssetRegistrationsRequest_Closure)
                 (const Tari__Rpc__ListAssetRegistrationsRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__ListAssetRegistrationsResponse_Closure)
                 (const Tari__Rpc__ListAssetRegistrationsResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetTokensRequest_Closure)
                 (const Tari__Rpc__GetTokensRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetTokensResponse_Closure)
                 (const Tari__Rpc__GetTokensResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__SubmitBlockResponse_Closure)
                 (const Tari__Rpc__SubmitBlockResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__BlockBlobRequest_Closure)
                 (const Tari__Rpc__BlockBlobRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__TipInfoResponse_Closure)
                 (const Tari__Rpc__TipInfoResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__NewBlockTemplateResponse_Closure)
                 (const Tari__Rpc__NewBlockTemplateResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__NewBlockTemplateRequest_Closure)
                 (const Tari__Rpc__NewBlockTemplateRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__NetworkDifficultyResponse_Closure)
                 (const Tari__Rpc__NetworkDifficultyResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__ValueAtHeightResponse_Closure)
                 (const Tari__Rpc__ValueAtHeightResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__IntegerValue_Closure)
                 (const Tari__Rpc__IntegerValue *message,
                  void *closure_data);
typedef void (*Tari__Rpc__StringValue_Closure)
                 (const Tari__Rpc__StringValue *message,
                  void *closure_data);
typedef void (*Tari__Rpc__BlockGroupRequest_Closure)
                 (const Tari__Rpc__BlockGroupRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__BlockGroupResponse_Closure)
                 (const Tari__Rpc__BlockGroupResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__HeightRequest_Closure)
                 (const Tari__Rpc__HeightRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__BlockTimingResponse_Closure)
                 (const Tari__Rpc__BlockTimingResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetHeaderByHashRequest_Closure)
                 (const Tari__Rpc__GetHeaderByHashRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__BlockHeaderResponse_Closure)
                 (const Tari__Rpc__BlockHeaderResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__ListHeadersRequest_Closure)
                 (const Tari__Rpc__ListHeadersRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetBlocksRequest_Closure)
                 (const Tari__Rpc__GetBlocksRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetBlocksResponse_Closure)
                 (const Tari__Rpc__GetBlocksResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__MetaData_Closure)
                 (const Tari__Rpc__MetaData *message,
                  void *closure_data);
typedef void (*Tari__Rpc__SyncInfoResponse_Closure)
                 (const Tari__Rpc__SyncInfoResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__SyncProgressResponse_Closure)
                 (const Tari__Rpc__SyncProgressResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetNewBlockResult_Closure)
                 (const Tari__Rpc__GetNewBlockResult *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetNewBlockBlobResult_Closure)
                 (const Tari__Rpc__GetNewBlockBlobResult *message,
                  void *closure_data);
typedef void (*Tari__Rpc__MinerData_Closure)
                 (const Tari__Rpc__MinerData *message,
                  void *closure_data);
typedef void (*Tari__Rpc__SearchKernelsRequest_Closure)
                 (const Tari__Rpc__SearchKernelsRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__SearchUtxosRequest_Closure)
                 (const Tari__Rpc__SearchUtxosRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__FetchMatchingUtxosRequest_Closure)
                 (const Tari__Rpc__FetchMatchingUtxosRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__FetchMatchingUtxosResponse_Closure)
                 (const Tari__Rpc__FetchMatchingUtxosResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetPeersResponse_Closure)
                 (const Tari__Rpc__GetPeersResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetPeersRequest_Closure)
                 (const Tari__Rpc__GetPeersRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__SubmitTransactionRequest_Closure)
                 (const Tari__Rpc__SubmitTransactionRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__SubmitTransactionResponse_Closure)
                 (const Tari__Rpc__SubmitTransactionResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetMempoolTransactionsRequest_Closure)
                 (const Tari__Rpc__GetMempoolTransactionsRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetMempoolTransactionsResponse_Closure)
                 (const Tari__Rpc__GetMempoolTransactionsResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__TransactionStateRequest_Closure)
                 (const Tari__Rpc__TransactionStateRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__TransactionStateResponse_Closure)
                 (const Tari__Rpc__TransactionStateResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__MempoolStatsResponse_Closure)
                 (const Tari__Rpc__MempoolStatsResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetActiveValidatorNodesRequest_Closure)
                 (const Tari__Rpc__GetActiveValidatorNodesRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetActiveValidatorNodesResponse_Closure)
                 (const Tari__Rpc__GetActiveValidatorNodesResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetShardKeyRequest_Closure)
                 (const Tari__Rpc__GetShardKeyRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetShardKeyResponse_Closure)
                 (const Tari__Rpc__GetShardKeyResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetTemplateRegistrationsRequest_Closure)
                 (const Tari__Rpc__GetTemplateRegistrationsRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetTemplateRegistrationResponse_Closure)
                 (const Tari__Rpc__GetTemplateRegistrationResponse *message,
                  void *closure_data);
typedef void (*Tari__Rpc__BlockInfo_Closure)
                 (const Tari__Rpc__BlockInfo *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetSideChainUtxosRequest_Closure)
                 (const Tari__Rpc__GetSideChainUtxosRequest *message,
                  void *closure_data);
typedef void (*Tari__Rpc__GetSideChainUtxosResponse_Closure)
                 (const Tari__Rpc__GetSideChainUtxosResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Tari__Rpc__BaseNode_Service Tari__Rpc__BaseNode_Service;
struct _Tari__Rpc__BaseNode_Service
{
  ProtobufCService base;
  void (*list_headers)(Tari__Rpc__BaseNode_Service *service,
                       const Tari__Rpc__ListHeadersRequest *input,
                       Tari__Rpc__BlockHeaderResponse_Closure closure,
                       void *closure_data);
  void (*get_header_by_hash)(Tari__Rpc__BaseNode_Service *service,
                             const Tari__Rpc__GetHeaderByHashRequest *input,
                             Tari__Rpc__BlockHeaderResponse_Closure closure,
                             void *closure_data);
  void (*get_blocks)(Tari__Rpc__BaseNode_Service *service,
                     const Tari__Rpc__GetBlocksRequest *input,
                     Tari__Rpc__HistoricalBlock_Closure closure,
                     void *closure_data);
  void (*get_block_timing)(Tari__Rpc__BaseNode_Service *service,
                           const Tari__Rpc__HeightRequest *input,
                           Tari__Rpc__BlockTimingResponse_Closure closure,
                           void *closure_data);
  void (*get_constants)(Tari__Rpc__BaseNode_Service *service,
                        const Tari__Rpc__BlockHeight *input,
                        Tari__Rpc__ConsensusConstants_Closure closure,
                        void *closure_data);
  void (*get_block_size)(Tari__Rpc__BaseNode_Service *service,
                         const Tari__Rpc__BlockGroupRequest *input,
                         Tari__Rpc__BlockGroupResponse_Closure closure,
                         void *closure_data);
  void (*get_block_fees)(Tari__Rpc__BaseNode_Service *service,
                         const Tari__Rpc__BlockGroupRequest *input,
                         Tari__Rpc__BlockGroupResponse_Closure closure,
                         void *closure_data);
  void (*get_version)(Tari__Rpc__BaseNode_Service *service,
                      const Tari__Rpc__Empty *input,
                      Tari__Rpc__StringValue_Closure closure,
                      void *closure_data);
  void (*check_for_updates)(Tari__Rpc__BaseNode_Service *service,
                            const Tari__Rpc__Empty *input,
                            Tari__Rpc__SoftwareUpdate_Closure closure,
                            void *closure_data);
  void (*get_tokens_in_circulation)(Tari__Rpc__BaseNode_Service *service,
                                    const Tari__Rpc__GetBlocksRequest *input,
                                    Tari__Rpc__ValueAtHeightResponse_Closure closure,
                                    void *closure_data);
  void (*get_network_difficulty)(Tari__Rpc__BaseNode_Service *service,
                                 const Tari__Rpc__HeightRequest *input,
                                 Tari__Rpc__NetworkDifficultyResponse_Closure closure,
                                 void *closure_data);
  void (*get_new_block_template)(Tari__Rpc__BaseNode_Service *service,
                                 const Tari__Rpc__NewBlockTemplateRequest *input,
                                 Tari__Rpc__NewBlockTemplateResponse_Closure closure,
                                 void *closure_data);
  void (*get_new_block)(Tari__Rpc__BaseNode_Service *service,
                        const Tari__Rpc__NewBlockTemplate *input,
                        Tari__Rpc__GetNewBlockResult_Closure closure,
                        void *closure_data);
  void (*get_new_block_blob)(Tari__Rpc__BaseNode_Service *service,
                             const Tari__Rpc__NewBlockTemplate *input,
                             Tari__Rpc__GetNewBlockBlobResult_Closure closure,
                             void *closure_data);
  void (*submit_block)(Tari__Rpc__BaseNode_Service *service,
                       const Tari__Rpc__Block *input,
                       Tari__Rpc__SubmitBlockResponse_Closure closure,
                       void *closure_data);
  void (*submit_block_blob)(Tari__Rpc__BaseNode_Service *service,
                            const Tari__Rpc__BlockBlobRequest *input,
                            Tari__Rpc__SubmitBlockResponse_Closure closure,
                            void *closure_data);
  void (*submit_transaction)(Tari__Rpc__BaseNode_Service *service,
                             const Tari__Rpc__SubmitTransactionRequest *input,
                             Tari__Rpc__SubmitTransactionResponse_Closure closure,
                             void *closure_data);
  void (*get_sync_info)(Tari__Rpc__BaseNode_Service *service,
                        const Tari__Rpc__Empty *input,
                        Tari__Rpc__SyncInfoResponse_Closure closure,
                        void *closure_data);
  void (*get_sync_progress)(Tari__Rpc__BaseNode_Service *service,
                            const Tari__Rpc__Empty *input,
                            Tari__Rpc__SyncProgressResponse_Closure closure,
                            void *closure_data);
  void (*get_tip_info)(Tari__Rpc__BaseNode_Service *service,
                       const Tari__Rpc__Empty *input,
                       Tari__Rpc__TipInfoResponse_Closure closure,
                       void *closure_data);
  void (*search_kernels)(Tari__Rpc__BaseNode_Service *service,
                         const Tari__Rpc__SearchKernelsRequest *input,
                         Tari__Rpc__HistoricalBlock_Closure closure,
                         void *closure_data);
  void (*search_utxos)(Tari__Rpc__BaseNode_Service *service,
                       const Tari__Rpc__SearchUtxosRequest *input,
                       Tari__Rpc__HistoricalBlock_Closure closure,
                       void *closure_data);
  void (*fetch_matching_utxos)(Tari__Rpc__BaseNode_Service *service,
                               const Tari__Rpc__FetchMatchingUtxosRequest *input,
                               Tari__Rpc__FetchMatchingUtxosResponse_Closure closure,
                               void *closure_data);
  void (*get_peers)(Tari__Rpc__BaseNode_Service *service,
                    const Tari__Rpc__GetPeersRequest *input,
                    Tari__Rpc__GetPeersResponse_Closure closure,
                    void *closure_data);
  void (*get_mempool_transactions)(Tari__Rpc__BaseNode_Service *service,
                                   const Tari__Rpc__GetMempoolTransactionsRequest *input,
                                   Tari__Rpc__GetMempoolTransactionsResponse_Closure closure,
                                   void *closure_data);
  void (*transaction_state)(Tari__Rpc__BaseNode_Service *service,
                            const Tari__Rpc__TransactionStateRequest *input,
                            Tari__Rpc__TransactionStateResponse_Closure closure,
                            void *closure_data);
  void (*identify)(Tari__Rpc__BaseNode_Service *service,
                   const Tari__Rpc__Empty *input,
                   Tari__Rpc__NodeIdentity_Closure closure,
                   void *closure_data);
  void (*get_network_status)(Tari__Rpc__BaseNode_Service *service,
                             const Tari__Rpc__Empty *input,
                             Tari__Rpc__NetworkStatusResponse_Closure closure,
                             void *closure_data);
  void (*list_connected_peers)(Tari__Rpc__BaseNode_Service *service,
                               const Tari__Rpc__Empty *input,
                               Tari__Rpc__ListConnectedPeersResponse_Closure closure,
                               void *closure_data);
  void (*get_mempool_stats)(Tari__Rpc__BaseNode_Service *service,
                            const Tari__Rpc__Empty *input,
                            Tari__Rpc__MempoolStatsResponse_Closure closure,
                            void *closure_data);
  void (*get_active_validator_nodes)(Tari__Rpc__BaseNode_Service *service,
                                     const Tari__Rpc__GetActiveValidatorNodesRequest *input,
                                     Tari__Rpc__GetActiveValidatorNodesResponse_Closure closure,
                                     void *closure_data);
  void (*get_shard_key)(Tari__Rpc__BaseNode_Service *service,
                        const Tari__Rpc__GetShardKeyRequest *input,
                        Tari__Rpc__GetShardKeyResponse_Closure closure,
                        void *closure_data);
  void (*get_template_registrations)(Tari__Rpc__BaseNode_Service *service,
                                     const Tari__Rpc__GetTemplateRegistrationsRequest *input,
                                     Tari__Rpc__GetTemplateRegistrationResponse_Closure closure,
                                     void *closure_data);
  void (*get_side_chain_utxos)(Tari__Rpc__BaseNode_Service *service,
                               const Tari__Rpc__GetSideChainUtxosRequest *input,
                               Tari__Rpc__GetSideChainUtxosResponse_Closure closure,
                               void *closure_data);
};
typedef void (*Tari__Rpc__BaseNode_ServiceDestroy)(Tari__Rpc__BaseNode_Service *);
void tari__rpc__base_node__init (Tari__Rpc__BaseNode_Service *service,
                                 Tari__Rpc__BaseNode_ServiceDestroy destroy);
#define TARI__RPC__BASE_NODE__BASE_INIT \
    { &tari__rpc__base_node__descriptor, protobuf_c_service_invoke_internal, NULL }
#define TARI__RPC__BASE_NODE__INIT(function_prefix__) \
    { TARI__RPC__BASE_NODE__BASE_INIT,\
      function_prefix__ ## list_headers,\
      function_prefix__ ## get_header_by_hash,\
      function_prefix__ ## get_blocks,\
      function_prefix__ ## get_block_timing,\
      function_prefix__ ## get_constants,\
      function_prefix__ ## get_block_size,\
      function_prefix__ ## get_block_fees,\
      function_prefix__ ## get_version,\
      function_prefix__ ## check_for_updates,\
      function_prefix__ ## get_tokens_in_circulation,\
      function_prefix__ ## get_network_difficulty,\
      function_prefix__ ## get_new_block_template,\
      function_prefix__ ## get_new_block,\
      function_prefix__ ## get_new_block_blob,\
      function_prefix__ ## submit_block,\
      function_prefix__ ## submit_block_blob,\
      function_prefix__ ## submit_transaction,\
      function_prefix__ ## get_sync_info,\
      function_prefix__ ## get_sync_progress,\
      function_prefix__ ## get_tip_info,\
      function_prefix__ ## search_kernels,\
      function_prefix__ ## search_utxos,\
      function_prefix__ ## fetch_matching_utxos,\
      function_prefix__ ## get_peers,\
      function_prefix__ ## get_mempool_transactions,\
      function_prefix__ ## transaction_state,\
      function_prefix__ ## identify,\
      function_prefix__ ## get_network_status,\
      function_prefix__ ## list_connected_peers,\
      function_prefix__ ## get_mempool_stats,\
      function_prefix__ ## get_active_validator_nodes,\
      function_prefix__ ## get_shard_key,\
      function_prefix__ ## get_template_registrations,\
      function_prefix__ ## get_side_chain_utxos  }
void tari__rpc__base_node__list_headers(ProtobufCService *service,
                                        const Tari__Rpc__ListHeadersRequest *input,
                                        Tari__Rpc__BlockHeaderResponse_Closure closure,
                                        void *closure_data);
void tari__rpc__base_node__get_header_by_hash(ProtobufCService *service,
                                              const Tari__Rpc__GetHeaderByHashRequest *input,
                                              Tari__Rpc__BlockHeaderResponse_Closure closure,
                                              void *closure_data);
void tari__rpc__base_node__get_blocks(ProtobufCService *service,
                                      const Tari__Rpc__GetBlocksRequest *input,
                                      Tari__Rpc__HistoricalBlock_Closure closure,
                                      void *closure_data);
void tari__rpc__base_node__get_block_timing(ProtobufCService *service,
                                            const Tari__Rpc__HeightRequest *input,
                                            Tari__Rpc__BlockTimingResponse_Closure closure,
                                            void *closure_data);
void tari__rpc__base_node__get_constants(ProtobufCService *service,
                                         const Tari__Rpc__BlockHeight *input,
                                         Tari__Rpc__ConsensusConstants_Closure closure,
                                         void *closure_data);
void tari__rpc__base_node__get_block_size(ProtobufCService *service,
                                          const Tari__Rpc__BlockGroupRequest *input,
                                          Tari__Rpc__BlockGroupResponse_Closure closure,
                                          void *closure_data);
void tari__rpc__base_node__get_block_fees(ProtobufCService *service,
                                          const Tari__Rpc__BlockGroupRequest *input,
                                          Tari__Rpc__BlockGroupResponse_Closure closure,
                                          void *closure_data);
void tari__rpc__base_node__get_version(ProtobufCService *service,
                                       const Tari__Rpc__Empty *input,
                                       Tari__Rpc__StringValue_Closure closure,
                                       void *closure_data);
void tari__rpc__base_node__check_for_updates(ProtobufCService *service,
                                             const Tari__Rpc__Empty *input,
                                             Tari__Rpc__SoftwareUpdate_Closure closure,
                                             void *closure_data);
void tari__rpc__base_node__get_tokens_in_circulation(ProtobufCService *service,
                                                     const Tari__Rpc__GetBlocksRequest *input,
                                                     Tari__Rpc__ValueAtHeightResponse_Closure closure,
                                                     void *closure_data);
void tari__rpc__base_node__get_network_difficulty(ProtobufCService *service,
                                                  const Tari__Rpc__HeightRequest *input,
                                                  Tari__Rpc__NetworkDifficultyResponse_Closure closure,
                                                  void *closure_data);
void tari__rpc__base_node__get_new_block_template(ProtobufCService *service,
                                                  const Tari__Rpc__NewBlockTemplateRequest *input,
                                                  Tari__Rpc__NewBlockTemplateResponse_Closure closure,
                                                  void *closure_data);
void tari__rpc__base_node__get_new_block(ProtobufCService *service,
                                         const Tari__Rpc__NewBlockTemplate *input,
                                         Tari__Rpc__GetNewBlockResult_Closure closure,
                                         void *closure_data);
void tari__rpc__base_node__get_new_block_blob(ProtobufCService *service,
                                              const Tari__Rpc__NewBlockTemplate *input,
                                              Tari__Rpc__GetNewBlockBlobResult_Closure closure,
                                              void *closure_data);
void tari__rpc__base_node__submit_block(ProtobufCService *service,
                                        const Tari__Rpc__Block *input,
                                        Tari__Rpc__SubmitBlockResponse_Closure closure,
                                        void *closure_data);
void tari__rpc__base_node__submit_block_blob(ProtobufCService *service,
                                             const Tari__Rpc__BlockBlobRequest *input,
                                             Tari__Rpc__SubmitBlockResponse_Closure closure,
                                             void *closure_data);
void tari__rpc__base_node__submit_transaction(ProtobufCService *service,
                                              const Tari__Rpc__SubmitTransactionRequest *input,
                                              Tari__Rpc__SubmitTransactionResponse_Closure closure,
                                              void *closure_data);
void tari__rpc__base_node__get_sync_info(ProtobufCService *service,
                                         const Tari__Rpc__Empty *input,
                                         Tari__Rpc__SyncInfoResponse_Closure closure,
                                         void *closure_data);
void tari__rpc__base_node__get_sync_progress(ProtobufCService *service,
                                             const Tari__Rpc__Empty *input,
                                             Tari__Rpc__SyncProgressResponse_Closure closure,
                                             void *closure_data);
void tari__rpc__base_node__get_tip_info(ProtobufCService *service,
                                        const Tari__Rpc__Empty *input,
                                        Tari__Rpc__TipInfoResponse_Closure closure,
                                        void *closure_data);
void tari__rpc__base_node__search_kernels(ProtobufCService *service,
                                          const Tari__Rpc__SearchKernelsRequest *input,
                                          Tari__Rpc__HistoricalBlock_Closure closure,
                                          void *closure_data);
void tari__rpc__base_node__search_utxos(ProtobufCService *service,
                                        const Tari__Rpc__SearchUtxosRequest *input,
                                        Tari__Rpc__HistoricalBlock_Closure closure,
                                        void *closure_data);
void tari__rpc__base_node__fetch_matching_utxos(ProtobufCService *service,
                                                const Tari__Rpc__FetchMatchingUtxosRequest *input,
                                                Tari__Rpc__FetchMatchingUtxosResponse_Closure closure,
                                                void *closure_data);
void tari__rpc__base_node__get_peers(ProtobufCService *service,
                                     const Tari__Rpc__GetPeersRequest *input,
                                     Tari__Rpc__GetPeersResponse_Closure closure,
                                     void *closure_data);
void tari__rpc__base_node__get_mempool_transactions(ProtobufCService *service,
                                                    const Tari__Rpc__GetMempoolTransactionsRequest *input,
                                                    Tari__Rpc__GetMempoolTransactionsResponse_Closure closure,
                                                    void *closure_data);
void tari__rpc__base_node__transaction_state(ProtobufCService *service,
                                             const Tari__Rpc__TransactionStateRequest *input,
                                             Tari__Rpc__TransactionStateResponse_Closure closure,
                                             void *closure_data);
void tari__rpc__base_node__identify(ProtobufCService *service,
                                    const Tari__Rpc__Empty *input,
                                    Tari__Rpc__NodeIdentity_Closure closure,
                                    void *closure_data);
void tari__rpc__base_node__get_network_status(ProtobufCService *service,
                                              const Tari__Rpc__Empty *input,
                                              Tari__Rpc__NetworkStatusResponse_Closure closure,
                                              void *closure_data);
void tari__rpc__base_node__list_connected_peers(ProtobufCService *service,
                                                const Tari__Rpc__Empty *input,
                                                Tari__Rpc__ListConnectedPeersResponse_Closure closure,
                                                void *closure_data);
void tari__rpc__base_node__get_mempool_stats(ProtobufCService *service,
                                             const Tari__Rpc__Empty *input,
                                             Tari__Rpc__MempoolStatsResponse_Closure closure,
                                             void *closure_data);
void tari__rpc__base_node__get_active_validator_nodes(ProtobufCService *service,
                                                      const Tari__Rpc__GetActiveValidatorNodesRequest *input,
                                                      Tari__Rpc__GetActiveValidatorNodesResponse_Closure closure,
                                                      void *closure_data);
void tari__rpc__base_node__get_shard_key(ProtobufCService *service,
                                         const Tari__Rpc__GetShardKeyRequest *input,
                                         Tari__Rpc__GetShardKeyResponse_Closure closure,
                                         void *closure_data);
void tari__rpc__base_node__get_template_registrations(ProtobufCService *service,
                                                      const Tari__Rpc__GetTemplateRegistrationsRequest *input,
                                                      Tari__Rpc__GetTemplateRegistrationResponse_Closure closure,
                                                      void *closure_data);
void tari__rpc__base_node__get_side_chain_utxos(ProtobufCService *service,
                                                const Tari__Rpc__GetSideChainUtxosRequest *input,
                                                Tari__Rpc__GetSideChainUtxosResponse_Closure closure,
                                                void *closure_data);

/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    tari__rpc__base_node_state__descriptor;
extern const ProtobufCEnumDescriptor    tari__rpc__calc_type__descriptor;
extern const ProtobufCEnumDescriptor    tari__rpc__sorting__descriptor;
extern const ProtobufCEnumDescriptor    tari__rpc__sync_state__descriptor;
extern const ProtobufCEnumDescriptor    tari__rpc__submit_transaction_result__descriptor;
extern const ProtobufCEnumDescriptor    tari__rpc__transaction_location__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_asset_metadata_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_asset_metadata_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__list_asset_registrations_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__list_asset_registrations_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_tokens_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_tokens_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__submit_block_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__block_blob_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__tip_info_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__new_block_template_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__new_block_template_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__network_difficulty_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__value_at_height_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__integer_value__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__string_value__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__block_group_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__block_group_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__height_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__block_timing_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_header_by_hash_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__block_header_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__list_headers_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_blocks_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_blocks_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__meta_data__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__sync_info_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__sync_progress_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_new_block_result__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_new_block_blob_result__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__miner_data__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__search_kernels_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__search_utxos_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__fetch_matching_utxos_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__fetch_matching_utxos_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_peers_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_peers_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__submit_transaction_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__submit_transaction_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_mempool_transactions_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_mempool_transactions_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__transaction_state_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__transaction_state_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__mempool_stats_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_active_validator_nodes_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_active_validator_nodes_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_shard_key_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_shard_key_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_template_registrations_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_template_registration_response__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__block_info__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_side_chain_utxos_request__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__get_side_chain_utxos_response__descriptor;
extern const ProtobufCServiceDescriptor tari__rpc__base_node__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_base_5fnode_2eproto__INCLUDED */
