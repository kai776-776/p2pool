/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: sidechain_types.proto */

#ifndef PROTOBUF_C_sidechain_5ftypes_2eproto__INCLUDED
#define PROTOBUF_C_sidechain_5ftypes_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "types.pb-c.h"

typedef struct _Tari__Rpc__SideChainFeature Tari__Rpc__SideChainFeature;
typedef struct _Tari__Rpc__ValidatorNodeRegistration Tari__Rpc__ValidatorNodeRegistration;
typedef struct _Tari__Rpc__TemplateRegistration Tari__Rpc__TemplateRegistration;
typedef struct _Tari__Rpc__ConfidentialOutputData Tari__Rpc__ConfidentialOutputData;
typedef struct _Tari__Rpc__TemplateType Tari__Rpc__TemplateType;
typedef struct _Tari__Rpc__WasmInfo Tari__Rpc__WasmInfo;
typedef struct _Tari__Rpc__FlowInfo Tari__Rpc__FlowInfo;
typedef struct _Tari__Rpc__ManifestInfo Tari__Rpc__ManifestInfo;
typedef struct _Tari__Rpc__BuildInfo Tari__Rpc__BuildInfo;


/* --- enums --- */


/* --- messages --- */

typedef enum {
  TARI__RPC__SIDE_CHAIN_FEATURE__SIDE_CHAIN_FEATURE__NOT_SET = 0,
  TARI__RPC__SIDE_CHAIN_FEATURE__SIDE_CHAIN_FEATURE_VALIDATOR_NODE_REGISTRATION = 1,
  TARI__RPC__SIDE_CHAIN_FEATURE__SIDE_CHAIN_FEATURE_TEMPLATE_REGISTRATION = 2,
  TARI__RPC__SIDE_CHAIN_FEATURE__SIDE_CHAIN_FEATURE_CONFIDENTIAL_OUTPUT = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TARI__RPC__SIDE_CHAIN_FEATURE__SIDE_CHAIN_FEATURE)
} Tari__Rpc__SideChainFeature__SideChainFeatureCase;

struct  _Tari__Rpc__SideChainFeature
{
  ProtobufCMessage base;
  Tari__Rpc__SideChainFeature__SideChainFeatureCase side_chain_feature_case;
  union {
    Tari__Rpc__ValidatorNodeRegistration *validator_node_registration;
    Tari__Rpc__TemplateRegistration *template_registration;
    Tari__Rpc__ConfidentialOutputData *confidential_output;
  };
};
#define TARI__RPC__SIDE_CHAIN_FEATURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__side_chain_feature__descriptor) \
    , TARI__RPC__SIDE_CHAIN_FEATURE__SIDE_CHAIN_FEATURE__NOT_SET, {0} }


struct  _Tari__Rpc__ValidatorNodeRegistration
{
  ProtobufCMessage base;
  ProtobufCBinaryData public_key;
  Tari__Rpc__Signature *signature;
};
#define TARI__RPC__VALIDATOR_NODE_REGISTRATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__validator_node_registration__descriptor) \
    , {0,NULL}, NULL }


struct  _Tari__Rpc__TemplateRegistration
{
  ProtobufCMessage base;
  ProtobufCBinaryData author_public_key;
  Tari__Rpc__Signature *author_signature;
  char *template_name;
  uint32_t template_version;
  Tari__Rpc__TemplateType *template_type;
  Tari__Rpc__BuildInfo *build_info;
  ProtobufCBinaryData binary_sha;
  char *binary_url;
};
#define TARI__RPC__TEMPLATE_REGISTRATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__template_registration__descriptor) \
    , {0,NULL}, NULL, (char *)protobuf_c_empty_string, 0, NULL, NULL, {0,NULL}, (char *)protobuf_c_empty_string }


struct  _Tari__Rpc__ConfidentialOutputData
{
  ProtobufCMessage base;
  ProtobufCBinaryData claim_public_key;
};
#define TARI__RPC__CONFIDENTIAL_OUTPUT_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__confidential_output_data__descriptor) \
    , {0,NULL} }


typedef enum {
  TARI__RPC__TEMPLATE_TYPE__TEMPLATE_TYPE__NOT_SET = 0,
  TARI__RPC__TEMPLATE_TYPE__TEMPLATE_TYPE_WASM = 1,
  TARI__RPC__TEMPLATE_TYPE__TEMPLATE_TYPE_FLOW = 2,
  TARI__RPC__TEMPLATE_TYPE__TEMPLATE_TYPE_MANIFEST = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TARI__RPC__TEMPLATE_TYPE__TEMPLATE_TYPE)
} Tari__Rpc__TemplateType__TemplateTypeCase;

struct  _Tari__Rpc__TemplateType
{
  ProtobufCMessage base;
  Tari__Rpc__TemplateType__TemplateTypeCase template_type_case;
  union {
    Tari__Rpc__WasmInfo *wasm;
    Tari__Rpc__FlowInfo *flow;
    Tari__Rpc__ManifestInfo *manifest;
  };
};
#define TARI__RPC__TEMPLATE_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__template_type__descriptor) \
    , TARI__RPC__TEMPLATE_TYPE__TEMPLATE_TYPE__NOT_SET, {0} }


struct  _Tari__Rpc__WasmInfo
{
  ProtobufCMessage base;
  uint32_t abi_version;
};
#define TARI__RPC__WASM_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__wasm_info__descriptor) \
    , 0 }


struct  _Tari__Rpc__FlowInfo
{
  ProtobufCMessage base;
};
#define TARI__RPC__FLOW_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__flow_info__descriptor) \
     }


struct  _Tari__Rpc__ManifestInfo
{
  ProtobufCMessage base;
};
#define TARI__RPC__MANIFEST_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__manifest_info__descriptor) \
     }


struct  _Tari__Rpc__BuildInfo
{
  ProtobufCMessage base;
  char *repo_url;
  ProtobufCBinaryData commit_hash;
};
#define TARI__RPC__BUILD_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tari__rpc__build_info__descriptor) \
    , (char *)protobuf_c_empty_string, {0,NULL} }


/* Tari__Rpc__SideChainFeature methods */
void   tari__rpc__side_chain_feature__init
                     (Tari__Rpc__SideChainFeature         *message);
size_t tari__rpc__side_chain_feature__get_packed_size
                     (const Tari__Rpc__SideChainFeature   *message);
size_t tari__rpc__side_chain_feature__pack
                     (const Tari__Rpc__SideChainFeature   *message,
                      uint8_t             *out);
size_t tari__rpc__side_chain_feature__pack_to_buffer
                     (const Tari__Rpc__SideChainFeature   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__SideChainFeature *
       tari__rpc__side_chain_feature__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__side_chain_feature__free_unpacked
                     (Tari__Rpc__SideChainFeature *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__ValidatorNodeRegistration methods */
void   tari__rpc__validator_node_registration__init
                     (Tari__Rpc__ValidatorNodeRegistration         *message);
size_t tari__rpc__validator_node_registration__get_packed_size
                     (const Tari__Rpc__ValidatorNodeRegistration   *message);
size_t tari__rpc__validator_node_registration__pack
                     (const Tari__Rpc__ValidatorNodeRegistration   *message,
                      uint8_t             *out);
size_t tari__rpc__validator_node_registration__pack_to_buffer
                     (const Tari__Rpc__ValidatorNodeRegistration   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__ValidatorNodeRegistration *
       tari__rpc__validator_node_registration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__validator_node_registration__free_unpacked
                     (Tari__Rpc__ValidatorNodeRegistration *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__TemplateRegistration methods */
void   tari__rpc__template_registration__init
                     (Tari__Rpc__TemplateRegistration         *message);
size_t tari__rpc__template_registration__get_packed_size
                     (const Tari__Rpc__TemplateRegistration   *message);
size_t tari__rpc__template_registration__pack
                     (const Tari__Rpc__TemplateRegistration   *message,
                      uint8_t             *out);
size_t tari__rpc__template_registration__pack_to_buffer
                     (const Tari__Rpc__TemplateRegistration   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__TemplateRegistration *
       tari__rpc__template_registration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__template_registration__free_unpacked
                     (Tari__Rpc__TemplateRegistration *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__ConfidentialOutputData methods */
void   tari__rpc__confidential_output_data__init
                     (Tari__Rpc__ConfidentialOutputData         *message);
size_t tari__rpc__confidential_output_data__get_packed_size
                     (const Tari__Rpc__ConfidentialOutputData   *message);
size_t tari__rpc__confidential_output_data__pack
                     (const Tari__Rpc__ConfidentialOutputData   *message,
                      uint8_t             *out);
size_t tari__rpc__confidential_output_data__pack_to_buffer
                     (const Tari__Rpc__ConfidentialOutputData   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__ConfidentialOutputData *
       tari__rpc__confidential_output_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__confidential_output_data__free_unpacked
                     (Tari__Rpc__ConfidentialOutputData *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__TemplateType methods */
void   tari__rpc__template_type__init
                     (Tari__Rpc__TemplateType         *message);
size_t tari__rpc__template_type__get_packed_size
                     (const Tari__Rpc__TemplateType   *message);
size_t tari__rpc__template_type__pack
                     (const Tari__Rpc__TemplateType   *message,
                      uint8_t             *out);
size_t tari__rpc__template_type__pack_to_buffer
                     (const Tari__Rpc__TemplateType   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__TemplateType *
       tari__rpc__template_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__template_type__free_unpacked
                     (Tari__Rpc__TemplateType *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__WasmInfo methods */
void   tari__rpc__wasm_info__init
                     (Tari__Rpc__WasmInfo         *message);
size_t tari__rpc__wasm_info__get_packed_size
                     (const Tari__Rpc__WasmInfo   *message);
size_t tari__rpc__wasm_info__pack
                     (const Tari__Rpc__WasmInfo   *message,
                      uint8_t             *out);
size_t tari__rpc__wasm_info__pack_to_buffer
                     (const Tari__Rpc__WasmInfo   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__WasmInfo *
       tari__rpc__wasm_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__wasm_info__free_unpacked
                     (Tari__Rpc__WasmInfo *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__FlowInfo methods */
void   tari__rpc__flow_info__init
                     (Tari__Rpc__FlowInfo         *message);
size_t tari__rpc__flow_info__get_packed_size
                     (const Tari__Rpc__FlowInfo   *message);
size_t tari__rpc__flow_info__pack
                     (const Tari__Rpc__FlowInfo   *message,
                      uint8_t             *out);
size_t tari__rpc__flow_info__pack_to_buffer
                     (const Tari__Rpc__FlowInfo   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__FlowInfo *
       tari__rpc__flow_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__flow_info__free_unpacked
                     (Tari__Rpc__FlowInfo *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__ManifestInfo methods */
void   tari__rpc__manifest_info__init
                     (Tari__Rpc__ManifestInfo         *message);
size_t tari__rpc__manifest_info__get_packed_size
                     (const Tari__Rpc__ManifestInfo   *message);
size_t tari__rpc__manifest_info__pack
                     (const Tari__Rpc__ManifestInfo   *message,
                      uint8_t             *out);
size_t tari__rpc__manifest_info__pack_to_buffer
                     (const Tari__Rpc__ManifestInfo   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__ManifestInfo *
       tari__rpc__manifest_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__manifest_info__free_unpacked
                     (Tari__Rpc__ManifestInfo *message,
                      ProtobufCAllocator *allocator);
/* Tari__Rpc__BuildInfo methods */
void   tari__rpc__build_info__init
                     (Tari__Rpc__BuildInfo         *message);
size_t tari__rpc__build_info__get_packed_size
                     (const Tari__Rpc__BuildInfo   *message);
size_t tari__rpc__build_info__pack
                     (const Tari__Rpc__BuildInfo   *message,
                      uint8_t             *out);
size_t tari__rpc__build_info__pack_to_buffer
                     (const Tari__Rpc__BuildInfo   *message,
                      ProtobufCBuffer     *buffer);
Tari__Rpc__BuildInfo *
       tari__rpc__build_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tari__rpc__build_info__free_unpacked
                     (Tari__Rpc__BuildInfo *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Tari__Rpc__SideChainFeature_Closure)
                 (const Tari__Rpc__SideChainFeature *message,
                  void *closure_data);
typedef void (*Tari__Rpc__ValidatorNodeRegistration_Closure)
                 (const Tari__Rpc__ValidatorNodeRegistration *message,
                  void *closure_data);
typedef void (*Tari__Rpc__TemplateRegistration_Closure)
                 (const Tari__Rpc__TemplateRegistration *message,
                  void *closure_data);
typedef void (*Tari__Rpc__ConfidentialOutputData_Closure)
                 (const Tari__Rpc__ConfidentialOutputData *message,
                  void *closure_data);
typedef void (*Tari__Rpc__TemplateType_Closure)
                 (const Tari__Rpc__TemplateType *message,
                  void *closure_data);
typedef void (*Tari__Rpc__WasmInfo_Closure)
                 (const Tari__Rpc__WasmInfo *message,
                  void *closure_data);
typedef void (*Tari__Rpc__FlowInfo_Closure)
                 (const Tari__Rpc__FlowInfo *message,
                  void *closure_data);
typedef void (*Tari__Rpc__ManifestInfo_Closure)
                 (const Tari__Rpc__ManifestInfo *message,
                  void *closure_data);
typedef void (*Tari__Rpc__BuildInfo_Closure)
                 (const Tari__Rpc__BuildInfo *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor tari__rpc__side_chain_feature__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__validator_node_registration__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__template_registration__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__confidential_output_data__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__template_type__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__wasm_info__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__flow_info__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__manifest_info__descriptor;
extern const ProtobufCMessageDescriptor tari__rpc__build_info__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_sidechain_5ftypes_2eproto__INCLUDED */
